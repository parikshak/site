define('core/js/wait',[],function() {

  var Wait = Backbone.Controller.extend({

    initialize: function() {
      _.bindAll(this, 'begin', 'end');
    },

    _waitCount: 0,
    _callbackHandle: null,
    _timeoutHandlerId: null,
    _timeoutInSeconds: 7,

    /**
       * Returns true if there are items in the waiting count.
       *
       * @return {Boolean}
       */
    isWaiting: function() {
      return (this._waitCount !== 0);
    },

    /**
       * Starts or re-starts a timer to ensure that pending calls to end()
       * are actually executed after a timeout period.
       */
    startTimer: function() {
      this.stopTimer();

      this._timeoutHandlerId = setInterval(function() {
        // Flush Adapt.wait due to timeout
        while (this._waitCount > 0) {
          // Trigger an end() for anything waiting.
          this.end();
        }

        if (this._waitCount === 0) {
          this.stopTimer();
        }
      }.bind(this), this._timeoutInSeconds * 1000);
    },

    /**
       * Clears the timer.
       */
    stopTimer: function() {
      if (this._timeoutHandlerId) {
        clearInterval(this._timeoutHandlerId);
      }
    },

    /**
       * Add one item to the waiting count.
       *
       * @return {Object}
       */
    begin: function() {

      if (!this.isWaiting()) {
        this.trigger('wait');
      }

      this._waitCount++;

      if (this._callbackHandle) {
        clearTimeout(this._callbackHandle);
        this._callbackHandle = null;
      }

      this.startTimer();

      return this;

    },

    /**
       * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.
       *
       * @return {Object}
       */
    end: function() {

      if (!this.isWaiting()) {
        return this;
      }

      this._waitCount--;

      if (this._waitCount === 0) {
        this.stopTimer();
      }

      if (this.isWaiting()) {
        return this;
      }

      if (this._callbackHandle) {
        return this;
      }

      this._callbackHandle = setTimeout(function() {

        this._callbackHandle = null;
        this.trigger('ready');

      }.bind(this), 0);

      return this;

    },

    /**
       * Queue this function until all open waits have been ended.
       *
       * @param  {Function} callback
       * @return {Object}
       */
    queue: function(callback) {

      this.begin();
      this.once('ready', callback);
      this.end();

      return this;

    },

    /**
       * Wait for this asynchronous function to execute before triggering ready event.
       *
       * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argument, done(). ]
       * @return {Object}
       */
    for: function(callback) {

      this.begin();
      _.defer(function() {
        callback(_.once(this.end));
      }.bind(this));

      return this;

    }

  });

  return Wait;

});

define('core/js/models/lockingModel',[],function() {

  var set = Backbone.Model.prototype.set;

  _.extend(Backbone.Model.prototype, {

    set: function(attrName, attrVal, options) {
      var stopProcessing = !this.lockedAttributes || typeof attrName === 'object' || typeof attrVal !== 'boolean' || !this.isLocking(attrName);
      if (stopProcessing) return set.apply(this, arguments);

      options = options || {};

      var isSettingValueForSpecificPlugin = options && options.pluginName;
      if (!isSettingValueForSpecificPlugin) {
        console.error('Must supply a pluginName to change a locked attribute');
        options.pluginName = 'compatibility';
      }

      var pluginName = options.pluginName;
      if (this.defaults[attrName] !== undefined) {
        this.lockedAttributes[attrName] = !this.defaults[attrName];
      }
      var lockingValue = this.lockedAttributes[attrName];
      var isAttemptingToLock = (lockingValue === attrVal);

      if (isAttemptingToLock) {

        this.setLockState(attrName, true, { pluginName: pluginName, skipcheck: true });

        // console.log(options.pluginName, "locking", attrName, "on", this.get("_id"));
        return set.call(this, attrName, lockingValue);

      }

      this.setLockState(attrName, false, { pluginName: pluginName, skipcheck: true });

      var totalLockValue = this.getLockCount(attrName, { skipcheck: true });
      // console.log(options.pluginName, "attempting to unlock", attrName, "on", this.get("_id"), "lockValue", totalLockValue, this._lockedAttributesValues[attrName]);
      if (totalLockValue === 0) {
        // console.log(options.pluginName, "unlocking", attrName, "on", this.get("_id"));
        return set.call(this, attrName, !lockingValue);
      }

      return this;

    },

    setLocking: function(attrName, defaultLockValue) {
      if (this.isLocking(attrName)) return;
      if (!this.lockedAttributes) this.lockedAttributes = {};
      this.lockedAttributes[attrName] = defaultLockValue;
    },

    unsetLocking: function(attrName) {
      if (!this.isLocking(attrName)) return;
      if (!this.lockedAttributes) return;
      delete this.lockedAttributes[attrName];
      delete this._lockedAttributesValues[attrName];
      if (_.keys(this.lockedAttributes).length === 0) {
        delete this.lockedAttributes;
        delete this._lockedAttributesValues;
      }
    },

    isLocking: function(attrName) {
      var isCheckingGeneralLockingState = (attrName === undefined);
      var isUsingLockedAttributes = (this.lockedAttributes !== undefined);

      if (isCheckingGeneralLockingState) {
        return isUsingLockedAttributes;
      }

      if (!isUsingLockedAttributes) return false;

      var isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;
      if (!isAttributeALockingAttribute) return false;

      if (this._lockedAttributesValues === undefined) {
        this._lockedAttributesValues = {};
      }

      if (this._lockedAttributesValues[attrName] === undefined) {
        this._lockedAttributesValues[attrName] = {};
      }

      return true;
    },

    isLocked: function(attrName, options) {
      var shouldSkipCheck = (options && options.skipcheck);
      if (!shouldSkipCheck) {
        var stopProcessing = !this.isLocking(attrName);
        if (stopProcessing) return;
      }

      return this.getLockCount(attrName) > 0;
    },

    getLockCount: function(attrName, options) {
      var shouldSkipCheck = (options && options.skipcheck);
      if (!shouldSkipCheck) {
        var stopProcessing = !this.isLocking(attrName);
        if (stopProcessing) return;
      }

      var isGettingValueForSpecificPlugin = options && options.pluginName;
      if (isGettingValueForSpecificPlugin) {

        return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
      }

      var lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);
      var lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value) { return sum + (value ? 1 : 0); }, 0);

      return lockingAttributeValuesSum;
    },

    setLockState: function(attrName, value, options) {
      var shouldSkipCheck = (options && options.skipcheck);
      if (!shouldSkipCheck) {
        var stopProcessing = !this.isLocking(attrName);
        if (stopProcessing) return this;
      }

      var isSettingValueForSpecificPlugin = options && options.pluginName;
      if (!isSettingValueForSpecificPlugin) {
        console.error('Must supply a pluginName to set a locked attribute lock value');
        options.pluginName = 'compatibility';
      }

      if (value) {
        this._lockedAttributesValues[attrName][options.pluginName] = value;
      } else {
        delete this._lockedAttributesValues[attrName][options.pluginName];
      }

      return this;

    }

  });

});

define('core/js/adapt',[
  'core/js/wait',
  'core/js/models/lockingModel'
], function(Wait) {

  var Adapt = Backbone.Model.extend({

    loadScript: window.__loadScript,
    location: {},
    componentStore: {},

    defaults: {
      _canScroll: true, // to stop scrollTo behaviour,
      _outstandingCompletionChecks: 0,
      _pluginWaitCount: 0,
      _isStarted: false
    },

    lockedAttributes: {
      _canScroll: false
    },

    init: function() {
      this.addDirection();
      this.disableAnimation();
      this.trigger('adapt:preInitialize');

      // wait until no more completion checking
      this.deferUntilCompletionChecked(function() {

        // start adapt in a full restored state
        this.trigger('adapt:start');

        if (!Backbone.History.started) {
          Backbone.history.start();
        }

        this.set('_isStarted', true);

        this.trigger('adapt:initialize');

      }.bind(this));
    },

    initialize: function () {
      this.setupWait();
    },

    /**
     * call when entering an asynchronous completion check
     */
    checkingCompletion: function() {
      var outstandingChecks = this.get('_outstandingCompletionChecks');
      this.set('_outstandingCompletionChecks', ++outstandingChecks);
    },

    /**
     * call when exiting an asynchronous completion check
     */
    checkedCompletion: function() {
      var outstandingChecks = this.get('_outstandingCompletionChecks');
      this.set('_outstandingCompletionChecks', --outstandingChecks);
    },

    /**
     * wait until there are no outstanding completion checks
     * @param {Function} callback Function to be called after all completion checks have been completed
     */
    deferUntilCompletionChecked: function(callback) {
      if (this.get('_outstandingCompletionChecks') === 0) return callback();

      var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {
        if (outstandingChecks !== 0) return;

        this.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

        callback();
      };

      this.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

    },

    setupWait: function() {

      this.wait = new Wait();

      // Setup legacy events and handlers
      var beginWait = function () {
        this.log.warn("DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future");
        this.wait.begin();
      }.bind(this);

      var endWait = function() {
        this.log.warn("DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future");
        this.wait.end();
      }.bind(this);

      var ready = function() {

        if (this.wait.isWaiting()) {
          return;
        }

        var isEventListening = (this._events['plugins:ready']);
        if (!isEventListening) {
          return;
        }

        this.log.warn("DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future");
        this.trigger('plugins:ready');

      }.bind(this);

      this.listenTo(this.wait, 'ready', ready);
      this.listenTo(this, {
        'plugin:beginWait': beginWait,
        'plugin:endWait': endWait
      });

    },

    isWaitingForPlugins: function() {
      this.log.warn('DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future');
      return this.wait.isWaiting();
    },

    checkPluginsReady: function() {
      this.log.warn('DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future');
      if (this.isWaitingForPlugins()) {
        return;
      }
      this.trigger('plugins:ready');
    },

    /**
     * Allows a selector to be passed in and Adapt will navigate to this element
     * @param {string} selector CSS selector of the Adapt element you want to navigate to e.g. `".co-05"`
     * @param {object} [settings] The settings for the `$.scrollTo` function (See https://github.com/flesler/jquery.scrollTo#settings).
     * You may also include a `replace` property that you can set to `true` if you want to update the URL without creating an entry in the browser's history.
     */
    navigateToElement: function(selector, settings) {
      settings = (settings || {});

      // Removes . symbol from the selector to find the model
      var currentModelId = selector.replace(/\./g, '');
      var currentModel = this.data.findById(currentModelId);
      // Get current page to check whether this is the current page
      var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');

      // If current page - scrollTo element
      if (currentPage.get('_id') === this.location._currentId) {
        return this.scrollTo(selector, settings);
      }

      // If the element is on another page navigate and wait until pageView:ready is fired
      // Then scrollTo element
      this.once('pageView:ready', _.debounce(function() {
        this.router.set('_shouldNavigateFocus', true);
        this.scrollTo(selector, settings);
      }.bind(this), 1));

      var shouldReplaceRoute = settings.replace || false;

      this.router.set('_shouldNavigateFocus', false);
      Backbone.history.navigate('#/id/' + currentPage.get('_id'), { trigger: true, replace: shouldReplaceRoute });
    },

    /**
     * Used to register components with the Adapt 'component store'
     * @param {string} name The name of the component to be registered
     * @param {object} object Object containing properties `model` and `view` or (legacy) an object representing the view
     */
    register: function(name, object) {
      if (this.componentStore[name]) {
        throw Error('The component "' + name + '" already exists in your project');
      }

      if (object.view) {
        // use view+model object
        if (!object.view.template) object.view.template = name;
      } else {
        // use view object
        if (!object.template) object.template = name;
      }

      this.componentStore[name] = object;

      return object;
    },

    /**
     * Fetches a component view class from the componentStore. For a usage example, see either HotGraphic or Narrative
     * @param {string} name The name of the componentView you want to fetch e.g. `"hotgraphic"`
     * @returns {ComponentView} Reference to the view class
     */
    getViewClass: function(name) {
      var object = this.componentStore[name];
      if (!object) {
        throw Error('The component "' + name + '" doesn\'t exist in your project');
      }
      return object.view || object;
    },

    /**
     * Looks up which collection a model belongs to
     * @param {string} id The id of the item you want to look up e.g. `"co-05"`
     * @return {string} One of the following (or `undefined` if not found):
     * - "course"
     * - "contentObjects"
     * - "blocks"
     * - "articles"
     * - "components"
     */
    mapById: function(id) {
      return this.data.mapById(id);
    },

    /**
     * Looks up a model by its `_id` property
     * @param {string} id The id of the item e.g. "co-05"
     * @return {Backbone.Model}
     */
    findById: function(id) {
      return this.data.findById(id);
    },

    findViewByModelId: function(id) {
      var model = this.data.findById(id);
      if (!model) return;

      if (model === this.parentView.model) return this.parentView;

      var idPathToView = [id];
      var currentLocationId = this.location._currentId;
      var currentLocationModel = _.find(model.getAncestorModels(), function(model) {
        var modelId = model.get('_id');
        if (modelId === currentLocationId) return true;
        idPathToView.unshift(modelId);
      });

      if (!currentLocationModel) {
        return console.warn('Adapt.findViewByModelId() unable to find view for model id: ' + id);
      }

      var foundView = _.reduce(idPathToView, function(view, currentId) {
        return view && view.childViews && view.childViews[currentId];
      }, this.parentView);

      return foundView;
    },

    /**
     * Relative strings describe the number and type of hops in the model hierarchy
     * @param {string} relativeString "@component +1" means to move one component forward from the current model
     * This function would return the following:
     * {
     *     type: "component",
     *     offset: 1
     * }
     * Trickle uses this function to determine where it should scrollTo after it unlocks
     */
    parseRelativeString: function(relativeString) {
      if (relativeString[0] === '@') {
        relativeString = relativeString.substr(1);
      }

      var type = relativeString.match(/(component|block|article|page|menu)/);
      if (!type) {
        this.log.error('Adapt.parseRelativeString() could not match relative type', relativeString);
        return;
      }
      type = type[0];

      var offset = parseInt(relativeString.substr(type.length).trim() || 0);
      if (isNaN(offset)) {
        this.log.error('Adapt.parseRelativeString() could not parse relative offset', relativeString);
        return;
      }

      return {
        type: type,
        offset: offset
      };

    },

    addDirection: function() {
      var defaultDirection = this.config.get('_defaultDirection');

      $('html')
        .addClass('dir-' + defaultDirection)
        .attr('dir', defaultDirection);
    },

    disableAnimation: function() {
      var disableAnimationArray = this.config.get('_disableAnimationFor');
      var disableAnimation = this.config.get('_disableAnimation');

      // Check if animations should be disabled
      if (disableAnimationArray && disableAnimationArray.length > 0) {
        for (var i = 0; i < disableAnimationArray.length; i++) {
          if ($('html').is(disableAnimationArray[i])) {
            this.config.set('_disableAnimation', true);
            $('html').addClass('disable-animation');
            console.log('Animation disabled.');
          }
        }
      } else if (disableAnimation === true) {
        $('html').addClass('disable-animation');
      } else {
        $('html').removeClass('disable-animation');
      }
    },

    remove: function() {
      this.trigger('preRemove');
      this.trigger('remove');
      _.defer(this.trigger.bind(this), 'postRemove');
    }

  });

  return new Adapt();
});

define('core/js/a11y/browserFocus',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * Browser modifications to focus handling.
   * @class
   */
  var BrowserFocus = Backbone.Controller.extend({

    initialize: function() {
      _.bindAll(this, '_onBlur', '_onClick');
      this.$body = $('body');
      this.listenTo(Adapt, {
        'accessibility:ready': this._attachEventListeners
      });
    },

    _attachEventListeners: function() {
      this.$body
        .on('blur', '*', this._onBlur)
        .on('blur', this._onBlur);
      // 'Capture' event attachment for click
      this.$body[0].addEventListener('click', this._onClick, true);
    },

    /**
     * When any element in the document receives a blur event,
     * check to see if it needs the `data-a11y-force-focus` attribute removing
     * and check to see if it was blurred because a disabled attribute was added.
     * If a disabled attribute was added, the focus will be moved forward.
     *
     * @param {JQuery.Event} event
     */
    _onBlur: function(event) {
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
        return;
      }
      var $element = $(event.target);
      if ($element.is('[data-a11y-force-focus]')) {
        _.defer(function() {
          $element.removeAttr('tabindex data-a11y-force-focus');
        });
      }
      // From here, only check source elements
      if (event.target !== event.currentTarget) {
        return;
      }
      // Check if element losing focus is losing focus
      // due to the addition of a disabled class
      if (!$element.is('[disabled]')) {
        return;
      }
      // Move focus to next readable element
      Adapt.a11y.focusNext($element);
    },

    /**
     * Force focus when clicked on a tabbable element,
     * making sure `document.activeElement` is updated.
     *
     * @param {JQuery.Event} event
     */
    _onClick: function(event) {
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
        return;
      }
      var $element = $(event.target);
      var $stack = $().add($element).add($element.parents());
      var $focusable = $stack.filter(config._options._tabbableElements);
      if (!$focusable.length) {
        return;
      }
      // Force focus for screen reader enter / space press
      $focusable[0].focus();
    }

  });

  return BrowserFocus;

});

define('core/js/a11y/focusOptions',[],function() {

  /**
   * Options parser for focus functions.
   * @class
   */
  var FocusOptions = function(options) {
    _.defaults(this, options, {

      /**
       * Stops the browser from scrolling to the focused point.
       * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
       *
       * @type {boolean}
       */
      preventScroll: true,

      /**
       * Add a defer to the focus call, allowing for user interface settling.
       *
       * @type {boolean}
       */
      defer: false

    });
  };

  return FocusOptions;

});

define('core/js/a11y/keyboardFocusOutline',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * Manages whether or not the focus outline should be entirely removed
   * or removed until a key is pressed on a tabbable element.
   * @class
   */
  var KeyboardFocusOutline = Backbone.Controller.extend({

    initialize: function() {
      _.bindAll(this, '_onKeyDown');
      this.$html = $('html');
      this.showOnKeys = {
        9: true, // tab
        13: true, // enter
        32: true, // space
        37: true, // arrow left
        38: true, // arrow up
        39: true, // arrow right
        40: true // arrow down
      };
      this.listenTo(Adapt, {
        'accessibility:ready': this._attachEventListeners
      });
    },

    _attachEventListeners: function() {
      document.addEventListener('keydown', this._onKeyDown);
      this._start();
    },

    /**
     * Add styling classes if required.
     */
    _start: function() {
      var config = Adapt.a11y.config;
      if (config._options._isFocusOutlineDisabled) {
        this.$html.addClass('a11y-disable-focusoutline');
        return;
      }
      if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
        return;
      }
      this.$html.addClass('a11y-disable-focusoutline');
    },

    /**
     * Handle key down events for on a tabbable element.
     *
     * @param {JQuery.Event} event
     */
    _onKeyDown: function(event) {
      var config = Adapt.a11y.config;
      if (config._options._isFocusOutlineDisabled) {
        this.$html.addClass('a11y-disable-focusoutline');
        return;
      }
      if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
        return;
      }
      var $element = $(event.target);
      if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
        return;
      }
      this.$html.removeClass('a11y-disable-focusoutline');
    }

  });

  return KeyboardFocusOutline;

});

define('core/js/a11y/log',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * Controller for managing accessibilty logging, specifically used for
   * controlling the display of removed or deprecated API warnings.
   */
  var Log = Backbone.Controller.extend({

    _warned: {},

    _hasWarned: function(args) {
      var config = Adapt.a11y.config;
      if (!config._options._warnFirstOnly) {
        return false;
      }
      var hash = _.map(args, String).join(':');
      if (this._warned[hash]) {
        return true;
      }
      this._warned[hash] = true;
      return false;
    },

    _canWarn: function() {
      var config = Adapt.a11y.config;
      return Boolean(config._options._warn);
    },

    removed: function() {
      if (!this._canWarn) {
        return;
      }
      var args = Array.prototype.slice.call(arguments);
      if (this._hasWarned(args)) {
        return;
      }
      Adapt.log.warn.apply(Adapt.log, ['A11Y REMOVED:'].concat(args));
      return this;
    },

    deprecated: function() {
      if (!this._canWarn) {
        return;
      }
      var args = Array.prototype.slice.call(arguments);
      if (this._hasWarned(args)) {
        return;
      }
      Adapt.log.warn.apply(Adapt.log, ['A11Y DEPRECATED:'].concat(args));
      return this;
    }

  });

  return Log;

});

define('core/js/a11y/scroll',[],function() {

  /**
   * Controller for blocking scroll events on specified elements.
   * @class
   */
  var Scroll = Backbone.Controller.extend({

    initialize: function() {
      _.bindAll(this, '_onTouchStart', '_onTouchEnd', '_onScrollEvent', '_onKeyDown');
      this._scrollDisabledElements = $([]);
      this.$window = $(window);
      this.$body = $('body');
      this._preventScrollOnKeys = {
        37: true, // left
        38: true, // up
        39: true, // right
        40: true // down
      };
      this._ignoreKeysOnElementsMatching = 'textarea, input, select';
      this._isRunning = false;
      this._touchStartEventObject = null;
    },

    /**
     * Block scrolling on the given elements.
     *
     * @param {Object|string|Array} $elements
     */
    disable: function($elements) {
      $elements = $($elements);
      this._scrollDisabledElements = this._scrollDisabledElements.add($elements);
      this._checkRunning();
      return this;
    },

    /**
     * Stop blocking scrolling on the given elements.
     *
     * @param {Object|string|Array} $items
     */
    enable: function($elements) {
      $elements = $($elements);
      if (!$elements || !$elements.length) {
        this.clear();
        return this;
      }
      this._scrollDisabledElements = this._scrollDisabledElements.not($elements);
      this._checkRunning();
      return this;
    },

    /**
     * Stop blocking all scrolling.
     */
    clear: function() {
      this._scrollDisabledElements = $([]);
      this._checkRunning();
      return this;
    },

    /**
     * Start or stop listening for events to block if and when needed.
     */
    _checkRunning: function() {
      if (!this._scrollDisabledElements.length) {
        this._stop();
        return;
      }
      this._start();
    },

    /**
     * Start listening for events to block.
     */
    _start: function() {
      if (this._isRunning) {
        return;
      }
      this._isRunning = true;
      window.addEventListener('touchstart', this._onTouchStart); // mobile
      window.addEventListener('touchend', this._onTouchEnd); // mobile
      window.addEventListener('touchmove', this._onScrollEvent, { passive: false }); // mobile
      window.addEventListener('wheel', this._onScrollEvent, { passive: false });
      document.addEventListener('wheel', this._onScrollEvent, { passive: false });
      document.addEventListener('keydown', this._onKeyDown);
    },

    /**
     * Capture the touchstart event object for deltaY calculations.
     *
     * @param {JQuery.Event} event
     */
    _onTouchStart: function(event) {
      event = $.event.fix(event);
      this._touchStartEventObject = event;
      return true;
    },

    /**
     * Clear touchstart event object.
     */
    _onTouchEnd: function() {
      this._touchStartEventObject = null;
      return true;
    },

    /**
     * Process a native scroll event.
     *
     * @param {JQuery.Event} event
     */
    _onScrollEvent: function(event) {
      event = $.event.fix(event);
      return this._preventScroll(event);
    },

    /**
     * Process a native keydown event.
     *
     * @param {JQuery.Event} event
     */
    _onKeyDown: function(event) {
      event = $.event.fix(event);
      if (!this._preventScrollOnKeys[event.keyCode]) {
        return;
      }
      var $target = $(event.target);
      if ($target.is(this._ignoreKeysOnElementsMatching)) {
        return;
      }
      return this._preventScroll(event);
    },

    /**
     * Process jquery event object.
     *
     * @param {JQuery.Event} event
     */
    _preventScroll: function(event) {
      var $target = $(event.target);
      if (this._scrollDisabledElements.length) {
        var scrollingParent = this._getScrollingParent(event, $target);
        if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
          this.$window.scroll();
          return;
        }
      }
      event.preventDefault();
      return false;
    },

    /**
     * Return the parent which will be scrolling from the current scroll event.
     *
     * @param {JQuery.Event} event
     * @param {Object} $target jQuery element object.
     */
    _getScrollingParent: function(event, $target) {
      var isTouchEvent = event.type === 'touchmove';
      var hasTouchStartEvent = (this._touchStartEventObject && this._touchStartEventObject.originalEvent);
      if (isTouchEvent && !hasTouchStartEvent) {
        return $target;
      }
      var directionY = this._getScrollDirection(event);
      if (directionY === 'none') {
        return this.$body;
      }
      var parents = $target.parents();
      for (var i = 0, l = parents.length; i < l; i++) {
        var $parent = $(parents[i]);
        if ($parent.is('body')) {
          return this.$body;
        }
        if (!this._isScrollable($parent)) {
          continue;
        }
        if (!this._isScrolling($parent, directionY)) {
          continue;
        }
        return $parent;
      }
      return this.$body;
    },

    /**
     * Returns true if the specified target is scrollable.
     *
     * @param {Object} $target jQuery element object.
     * @returns {boolean}
     */
    _isScrollable: function($target) {
      var scrollType = $target.css('overflow-y');
      if (scrollType !== 'auto' && scrollType !== 'scroll') {
        return false;
      }
      var pointerEvents = $target.css('pointer-events');
      if (pointerEvents === 'none') {
        return false;
      }
      return true;
    },

    /**
     * Returns true if the specified target is the scrolling target.
     *
     * @param {Object} $target jQuery element object.
     * @param {string} directionY 'none' | 'up' | 'down'
     *
     * @returns {boolean}
     */
    _isScrolling: function($target, directionY) {
      var scrollTop = Math.ceil($target.scrollTop());
      var innerHeight = $target.outerHeight();
      var scrollHeight = $target[0].scrollHeight;
      var hasScrollingSpace = false;
      switch (directionY) {
        case 'down':
          hasScrollingSpace = scrollTop + innerHeight < scrollHeight;
          if (hasScrollingSpace) {
            return true;
          }
          break;
        case 'up':
          hasScrollingSpace = scrollTop > 0;
          if (hasScrollingSpace) {
            return true;
          }
          break;
      }
      return false;
    },

    /**
     * Returns the vertical direction of scroll.
     *
     * @param {JQuery.Event} event
     * @returns {string} 'none' | 'up' | 'down'
     */
    _getScrollDirection: function(event) {
      var deltaY = this._getScrollDelta(event);
      if (deltaY === 0) {
        return 'none';
      }
      return deltaY > 0 ? 'up' : 'down';
    },

    /**
     * Returns the number of pixels which is intended to be scrolled.
     *
     * @param {JQuery.Event} event
     * @returns {number}
     */
    _getScrollDelta: function(event) {
      var deltaY = 0;
      var isTouchEvent = event.type === 'touchmove';
      var originalEvent = event.originalEvent;
      if (isTouchEvent) {
        // Touch events
        // iOS previous + current scroll pos
        var startOriginalEvent = this._touchStartEventObject.originalEvent;
        var currentY = originalEvent.pageY;
        var previousY = startOriginalEvent.pageY;
        if (currentY === 0 || currentY === previousY) {
          // Android chrome current scroll pos
          currentY = originalEvent.touches[0].pageY;
          previousY = startOriginalEvent.touches[0].pageY;
        }
        // Touch: delta calculated from touchstart pos vs touchmove pos
        deltaY = currentY - previousY;
      } else {
        // Mouse events
        var hasDeltaY = (originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined);
        if (hasDeltaY) {
          // Desktop: Firefox & IE delta inverted
          deltaY = -originalEvent.deltaY;
        } else {
          // Desktop: Chrome & Safari wheel delta
          deltaY = (originalEvent.wheelDelta || 0);
        }
      }
      return deltaY;
    },

    /**
     * Stop listening for events to block.
     */
    _stop: function() {
      if (!this._isRunning) {
        return;
      }
      this._isRunning = false;
      window.removeEventListener('touchstart', this._onTouchStart); // mobile
      window.removeEventListener('touchend', this._onTouchEnd); // mobile
      // shouldn't need to supply 3rd arg when removing, but IE11 won't remove the event listener if you don't - see https://github.com/adaptlearning/adapt_framework/issues/2466
      window.removeEventListener('touchmove', this._onScrollEvent, { passive: false }); // mobile
      window.removeEventListener('wheel', this._onScrollEvent, { passive: false });
      document.removeEventListener('wheel', this._onScrollEvent, { passive: false });
      document.removeEventListener('keydown', this._onKeyDown);
    }

  });

  return Scroll;

});

define('core/js/a11y/wrapFocus',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * Controller for managing tab wrapping for popups.
   * @class
   */
  var WrapFocus = Backbone.Controller.extend({

    initialize: function() {
      _.bindAll(this, '_onWrapAround');
      this.listenTo(Adapt, {
        'accessibility:ready': this._attachEventListeners
      });
    },

    _attachEventListeners: function() {
      var config = Adapt.a11y.config;
      $('body').on('click focus', config._options._focusguard, this._onWrapAround);
    },

    /**
     * If click or focus is received on any element with the focusguard class,
     * loop focus around to the top of the document.
     *
     * @param {JQuery.Event} event
     */
    _onWrapAround: function(event) {
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      Adapt.a11y.focusFirst('body', { defer: false });
    }

  });

  return WrapFocus;

});

define('core/js/a11y/popup',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * Tabindex and aria-hidden manager for popups.
   * @class
   */
  var Popup = Backbone.Controller.extend({

    /**
     * List of elements which form the base at which elements are generally tabbale
     * and aria-hidden='false'.
     *
     * @type {Array<Object>}
     */
    _floorStack: [$('body')],
    /**
     * List of elements to return the focus to once leaving each stack.
     *
     * @type {Array<Object>}
     */
    _focusStack: [],
    /**
     * Hash of tabindex states for each tabbable element in the popup stack.
     *
     * @type {Object}
     */
    _tabIndexes: {},
    /**
     * Hash of aria-hidden states for each tabbable element in the popup stack.
     *
     * @type {Object}
     */
    _ariaHiddens: {},
    /**
     * Incremented unique ids for elements belonging to a popup stack with saved
     * states,
     */
    _elementUIDIndex: 0,

    initialize: function() {
      this.listenTo(Adapt, {
        'popup:opened': function($element, ignoreInternalTrigger) {
          if (ignoreInternalTrigger) {
            return;
          }
          Adapt.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with Adapt.a11y.popupOpened($element);');
          this.opened($element, true);
        },
        'popup:closed': function($target, ignoreInternalTrigger) {
          if (ignoreInternalTrigger) {
            return;
          }
          Adapt.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with Adapt.a11y.popupClosed($target);');
          this.closed($target, true);
        }
      });
    },

    /**
     * Reorganise the tabindex and aria-hidden attributes in the document to
     * restrict user interaction to the element specified.
     *
     * @param {Object} [$popupElement] Element encapulating the popup.
     * @returns {Object} Returns `Adapt.a11y._popup`.
     */
    opened: function($popupElement, silent) {
      // Capture currently active element or element specified
      $popupElement = $popupElement || $(document.activeElement);
      this._addPopupLayer($popupElement);
      if (!silent) {
        Adapt.trigger('popup:opened', $popupElement, true);
      }
      return this;
    },

    /**
     * Restrict tabbing and screen reader access to selected element only.
     *
     * @param {Object} $popupElement Element encapulating the popup.
     */
    _addPopupLayer: function($popupElement) {
      $popupElement = $($popupElement);
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
        return $popupElement;
      }
      this._floorStack.push($popupElement);
      this._focusStack.push($(document.activeElement));
      var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      var $branch = $popupElement.add($popupElement.parents());
      var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
      $elements = $elements.add($siblings);
      $elements.each(function(index, item) {
        var $item = $(item);
        var elementUID;
        if (typeof item.a11y_uid === 'undefined') {
          item.a11y_uid = 'UID' + ++this._elementUIDIndex;
        }
        elementUID = item.a11y_uid;
        if (this._tabIndexes[elementUID] === undefined) {
          this._tabIndexes[elementUID] = [];
        }
        if (this._ariaHiddens[elementUID] === undefined) {
          this._ariaHiddens[elementUID] = [];
        }
        var tabindex = $item.attr('tabindex');
        var ariaHidden = $item.attr('aria-hidden');
        this._tabIndexes[elementUID].push(tabindex === undefined ? '' : tabindex);
        this._ariaHiddens[elementUID].push(ariaHidden === undefined ? '' : ariaHidden);
        if (config._options._isPopupTabIndexManagementEnabled) {
          $item.attr('tabindex', -1);
        }
        if (config._options._isPopupAriaHiddenManagementEnabled) {
          $item.attr('aria-hidden', true);
        }
      }.bind(this));
      var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      if (config._options._isPopupTabIndexManagementEnabled) {
        $items.attr('tabindex', 0);
      }
      if (config._options._isPopupAriaHiddenManagementEnabled) {
        $items
          .removeAttr('aria-hidden')
          .removeClass('aria-hidden')
          .parents(config._options._ariaHiddenExcludes)
          .removeAttr('aria-hidden')
          .removeClass('aria-hidden');
      }
    },

    /**
     * Close the last popup on the stack, restoring tabindex and aria-hidden
     * attributes.
     *
     * @param {Object} [$focusElement] Element at which to move focus.
     * @returns {Object} Returns `Adapt.a11y._popup`.
     */
    closed: function($focusElement, silent) {
      var $previousFocusElement = this._removeLastPopupLayer();
      $focusElement = $focusElement || $previousFocusElement || $('body');
      if (!silent) {
        Adapt.trigger('popup:closed', $focusElement, true);
      }
      Adapt.a11y.focusFirst($($focusElement));
      return this;
    },

    /**
     * Restores tabbing and screen reader access to the state before the last
     * `_addPopupLayer` call.
     *
     * @returns {Object} Returns previously active element.
     */
    _removeLastPopupLayer: function() {
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
        return $(document.activeElement);
      }
      // the body layer is the first element and must always exist
      if (this._floorStack.length <= 1) {
        return;
      }
      this._floorStack.pop();
      $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function(index, item) {
        var $item = $(item);
        var previousTabIndex = '';
        var previousAriaHidden = '';
        var elementUID;
        if (typeof item.a11y_uid === 'undefined') {
          // assign element a unique id
          item.a11y_uid = 'UID' + ++this._elementUIDIndex;
        }
        elementUID = item.a11y_uid;
        if (this._tabIndexes[elementUID] !== undefined && this._tabIndexes[elementUID].length !== 0) {
          // get previous tabindex if saved
          previousTabIndex = this._tabIndexes[elementUID].pop();
          previousAriaHidden = this._ariaHiddens[elementUID].pop();
        }
        if (this._tabIndexes[elementUID] !== undefined && this._tabIndexes[elementUID].length === 0) {
          // delete element tabindex store if empty
          delete this._tabIndexes[elementUID];
          delete this._ariaHiddens[elementUID];
        }
        if (config._options._isPopupTabIndexManagementEnabled) {
          if (previousTabIndex === '') {
            $item.removeAttr('tabindex');
          } else {
            $item.attr({
              'tabindex': previousTabIndex
            });
          }
        }
        if (config._options._isPopupAriaHiddenManagementEnabled) {
          if (previousAriaHidden === '') {
            $item.removeAttr('aria-hidden');
          } else {
            $item.attr({
              'aria-hidden': previousAriaHidden
            });
          }
        }
      }.bind(this));
      return (document.activeElement = this._focusStack.pop());
    },

    /**
     * When a popup is open, this function makes it possible to swap the element
     * that should receive focus on popup close.
     *
     * @param {Object} $focusElement Set a new element to focus on.
     * @returns {Object} Returns previously set focus element.
     */
    setCloseTo: function($focusElement) {
      var $original = this._focusStack.pop();
      this._focusStack.push($focusElement);
      return $original;
    }

  });

  return Popup;

});

define('core/js/a11y/deprecated',[
  'core/js/adapt'
], function(Adapt) {

  /**
   * The old API is rerouted to the new API with warnings.
   */

  _.extend($.fn, {

    isFixedPostion: function() {
      Adapt.a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
      return false;
    },

    a11y_aria_label: function() {
      Adapt.a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
      return this;
    },

    limitedScrollTo: function() {
      Adapt.a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
      return this;
    },

    a11y_text: function() {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return this;
    },

    a11y_selected: function() {
      Adapt.a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
      return this;
    },

    a11y_on: function(isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.findTabbable($element); and Adapt.a11y.toggleAccessible($elements, isAccessible); instead.');
      var $tabbable = Adapt.a11y.findTabbable(this);
      Adapt.a11y.toggleAccessible($tabbable, isOn);
      return this;
    },

    a11y_only: function() {
      Adapt.a11y.log.removed('$("..").a11y_only, use Adapt.a11y.popupOpened($popupElement); instead.');
      return this;
    },

    scrollDisable: function() {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }
      Adapt.a11y.log.deprecated('$("..").scrollDisable, use Adapt.a11y.scrollDisable($elements); instead.');
      Adapt.a11y.scrollDisable(this);
      return this;
    },

    scrollEnable: function() {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }
      Adapt.a11y.log.deprecated('$("..").scrollEnable, use Adapt.a11y.scrollEnable($elements); instead.');
      Adapt.a11y.scrollEnable(this);
      return this;
    },

    a11y_popup: function() {
      Adapt.a11y.log.deprecated('$("..").a11y_popup, use Adapt.a11y.popupOpened($popupElement); instead.');
      return Adapt.a11y.popupOpened(this);
    },

    a11y_cntrl: function(isOn, withDisabled) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl, use Adapt.a11y.toggleAccessible($elements, isAccessible); and if needed Adapt.a11y.toggleEnabled($elements, isEnabled); instead.');
      Adapt.a11y.toggleAccessible(this, isOn);
      if (withDisabled) Adapt.a11y.toggleEnabled(this, isOn);
      return this;
    },

    a11y_cntrl_enabled: function(isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl_enabled, use Adapt.a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
      Adapt.a11y.toggleAccessibleEnabled(this, isOn);
      return this;
    },

    isReadable: function() {
      Adapt.a11y.log.deprecated('$("..").isReadable, use Adapt.a11y.isReadable($element); instead.');
      return Adapt.a11y.isReadable(this);
    },

    findForward: function(selector) {
      Adapt.a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFirstForward(this, selector);
    },

    findWalk: function(selector) {
      Adapt.a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFindForwardDescendant(this, selector);
    },

    focusNoScroll: function() {
      Adapt.a11y.log.deprecated('$("..").focusNoScroll, use Adapt.a11y.focus($element); instead.');
      return Adapt.a11y.focus(this);
    },

    focusNext: function(returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusNext, use Adapt.a11y.focusNext($element); or if needed Adapt.a11y.findFirstReadable($element); instead.');
      if (returnOnly) {
        return Adapt.a11y.findFirstReadable(this);
      }
      return Adapt.a11y.focusNext(this);
    },

    focusOrNext: function(returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusOrNext, use Adapt.a11y.focusFirst($element); or if needed Adapt.a11y.findFirstReadable($element); or Adapt.a11y.isReadable($element); instead.');
      if (returnOnly) {
        if (Adapt.a11y.isReadable(this)) return this;
        return Adapt.a11y.findFirstReadable(this);
      }
      return Adapt.a11y.focusFirst(this);
    },

    a11y_focus: function(dontDefer) {
      Adapt.a11y.log.deprecated('$("..").a11y_focus, use Adapt.a11y.focusFirst($element, { defer: true }); instead.');
      Adapt.a11y.focusFirst(this, { defer: !dontDefer });
      return this;
    }

  });

  _.extend($, {

    a11y_alert: function() {
      Adapt.a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
      return this;
    },

    a11y_update: function() {
      Adapt.a11y.log.removed('a11y_update is no longer required.');
      return this;
    },

    a11y_text: function (text) {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },

    a11y_on: function(isOn, selector) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.toggleHidden($elements, isHidden); instead.');
      return Adapt.a11y.toggleHidden(selector, !isOn);
    },

    a11y_popdown: function($focusTarget) {
      Adapt.a11y.log.removed('$.a11y_popdown, use Adapt.a11y.popupClosed($focusTarget); instead.');
      return Adapt.a11y.popupClosed($focusTarget);
    },

    a11y_focus: function(dontDefer) {
      Adapt.a11y.log.deprecated('$.a11y_focus, use Adapt.a11y.focusFirst("body", { defer: true }); instead.');
      Adapt.a11y.focusFirst('body', { defer: !dontDefer });
      return this;
    },

    a11y_normalize: function(html) {
      Adapt.a11y.log.deprecated('$.a11y_normalize, use Adapt.a11y.normalize("html"); instead.');
      return Adapt.a11y.normalize(html);
    },

    a11y_remove_breaks: function(html) {
      Adapt.a11y.log.deprecated('$.a11y_remove_breaks, use Adapt.a11y.removeBreaks("html"); instead.');
      return Adapt.a11y.removeBreaks(html);
    }

  });

});

define('core/js/a11y',[
  'core/js/adapt',
  './a11y/browserFocus',
  './a11y/focusOptions',
  './a11y/keyboardFocusOutline',
  './a11y/log',
  './a11y/scroll',
  './a11y/wrapFocus',
  './a11y/popup',
  './a11y/deprecated'
], function(Adapt, BrowserFocus, FocusOptions, KeyboardFocusOutline, Log, Scroll, WrapFocus, Popup) {

  var A11y = Backbone.Controller.extend({

    $html: $('html'),
    _htmlCharRegex: /&.*;/g,

    config: null,
    defaults: {

      _isFocusOutlineKeyboardOnlyEnabled: true,
      /**
       * `_isFocusOutlineDisabled` ignores `_isEnabled` and can be used when all other
       * accessibility features have been disabled.
       */
      _isFocusOutlineDisabled: false,
      _isFocusAssignmentEnabled: true,
      _isFocusOnClickEnabled: true,
      _isFocusNextOnDisabled: true,
      _isScrollDisableEnabled: true,
      _isAriaHiddenManagementEnabled: true,
      _isPopupManagementEnabled: true,
      _isPopupWrapFocusEnabled: true,
      _isPopupAriaHiddenManagementEnabled: true,
      _isPopupTabIndexManagementEnabled: true,
      /**
       * Do not change aria-hidden on these elements.
       */
      _ariaHiddenExcludes: ':not(#wrapper):not(body)',
      _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
      _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
      /**
       * Designate these elements as not tabbable.
       */
      _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
      _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
      _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
      /**
       * Selector for elements which cause tab wrapping.
       */
      _focusguard: '.a11y-focusguard',
      /**
       * Specifies all stylistic elements.
       */
      _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',

      /**
       * Logging settings
       */
      _warnFirstOnly: true,
      _warn: true

    },

    _browserFocus: new BrowserFocus(),
    _keyboardFocusOutline: new KeyboardFocusOutline(),
    _wrapFocus: new WrapFocus(),
    _popup: new Popup(),
    _scroll: new Scroll(),

    log: new Log(),

    initialize: function() {
      this._removeLegacyElements();
      this.listenToOnce(Adapt, {
        'app:dataLoaded': this._onDataLoaded,
        'navigationView:postRender': this._removeLegacyElements
      }, this);
      Adapt.on('device:changed', this._setupNoSelect);
      this.listenTo(Adapt, {
        'router:location': this._onNavigationStart,
        'pageView:ready menuView:ready router:plugin': this._onNavigationEnd
      });
    },

    _onDataLoaded: function() {
      this.config = Adapt.config.get('_accessibility');
      this.config._isActive = false;
      this.config._options = _.defaults(this.config._options || {}, this.defaults);
      Adapt.offlineStorage.set('a11y', false);
      this.$html.toggleClass('has-accessibility', this.isEnabled());
      this._setupNoSelect();
      this._addFocuserDiv();
      if (this._isReady) {
        return;
      }
      this._isReady = true;
      Adapt.trigger('accessibility:ready');
    },

    _setupNoSelect: function() {
      if (!this.config || !this.config._disableTextSelectOnClasses) {
        return;
      }
      var classes = this.config._disableTextSelectOnClasses.split(' ');
      var isMatch = false;
      for (var i = 0, item; (item = classes[i++]);) {
        if (this.$html.is(item)) {
          isMatch = true;
          break;
        }
      }
      this.$html.toggleClass('u-no-select', isMatch);
    },

    _addFocuserDiv: function() {
      if ($('#a11y-focuser').length) {
        return;
      }
      $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1" role="presentation">&nbsp;</div>'));
    },

    _removeLegacyElements: function() {
      var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
      var $navigationElements = $('.nav').find('#accessibility-toggle, #accessibility-instructions');
      if (!$legacyElements.length && !$navigationElements.length) {
        return;
      }
      Adapt.log.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
      $legacyElements.remove();
      $navigationElements.remove();
    },

    _onNavigationStart: function() {
      if (!this.isEnabled()) {
        return;
      }
      // Stop document reading
      _.defer(function() {
        Adapt.a11y.toggleHidden('.page, .menu', true);
      });
    },

    _onNavigationEnd: function(view) {
      // Prevent sub-menu items provoking behaviour
      if ((view && view.model && view.model.get('_id') !== Adapt.location._currentId) || !this.isEnabled()) {
        return;
      }
      // Allow document to be read
      Adapt.a11y.toggleHidden('.page, .menu', false);
    },

    isActive: function() {
      this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
      return false;
    },

    isEnabled: function() {
      return this.config && this.config._isEnabled;
    },

    /**
     * Adds or removes `aria-hidden` attribute to elements.
     *
     * @param {Object|string|Array} $elements
     * @param {boolean} [isHidden=true]
     * @returns {Object} Returns `Adapt.a11y`
     */
    toggleHidden: function($elements, isHidden) {
      $elements = $($elements);
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
        return this;
      }
      isHidden = isHidden === undefined ? true : isHidden;
      if (isHidden === true) {
        $elements.attr('aria-hidden', true);
      } else {
        $elements.removeAttr('aria-hidden');
      }
      return this;
    },

    /**
     * Adds or removes `aria-hidden` and `disabled` attributes and `disabled`
     * classes to elements.
     *
     * @param {Object|string|Array} $elements
     * @param {boolean} [isHidden=true]
     * @returns {Object} Returns `Adapt.a11y`
     */
    toggleAccessibleEnabled: function($elements, isAccessibleEnabled) {
      this.toggleAccessible($elements, isAccessibleEnabled);
      this.toggleEnabled($elements, isAccessibleEnabled);
      return this;
    },

    /**
     * Adds or removes `aria-hidden` attribute and disables `tabindex` on elements.
     *
     * @param {Object|string|Array} $elements
     * @param {boolean} [isReadable=true]
     * @returns {Object} Returns `Adapt.a11y`
     */
    toggleAccessible: function($elements, isReadable) {
      $elements = $($elements);
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
        return this;
      }
      isReadable = isReadable === undefined ? true : isReadable;
      if (!isReadable) {
        $elements.attr({
          tabindex: '-1',
          'aria-hidden': 'true'
        }).addClass('aria-hidden');
      } else {
        $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
        $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
      }
      return this;
    },

    /**
     * Adds or removes `disabled` attribute and `disabled` class.
     *
     * @param {Object|string|Array} $elements
     * @param {boolean} [isEnabled=true]
     * @returns {Object} Returns `Adapt.a11y`
     */
    toggleEnabled: function($elements, isEnabled) {
      $elements = $($elements);
      if ($elements.length === 0) {
        return this;
      }
      isEnabled = isEnabled === undefined ? true : isEnabled;
      if (!isEnabled) {
        $elements.attr('disabled', 'disabled').addClass('is-disabled');
      } else {
        $elements.removeAttr('disabled').removeClass('is-disabled');
      }
      return this;
    },

    /**
     * Find the first tabbable element after the specified element.
     *
     * @param {Object|string|Array} $element
     * @returns {Object}
     */
    findFirstTabbable: function($element) {
      $element = $($element).first();
      return this._findFirstForward($element, this.isTabbable);
    },

    /**
     * Find the first readable element after the specified element.
     *
     * @param {Object|string|Array} $element
     * @returns {Object}
     */
    findFirstReadable: function($element) {
      $element = $($element).first();
      return this._findFirstForward($element, this.isReadable);
    },

    /**
     * Find all tabbable elements in the specified element.
     *
     * @param {Object|string|Array} $element
     * @returns {Object}
     */
    findTabbable: function($element) {
      var config = Adapt.a11y.config;
      return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
    },

    /**
     * Find all readable elements in the specified element.
     *
     * @param {Object|string|Array} $element
     */
    findReadable: function($element) {
      return $($element).find('*').filter(function(index, element) {
        return this.isReadable(element);
      }.bind(this));
    },

    /**
     * Check if the element is natively or explicitly tabbable.
     *
     * @param {Object|string|Array} $element
     * @returns {boolean|undefined}
     */
    isTabbable: function($element) {
      var config = Adapt.a11y.config;
      var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);
      if (!value) {
        return undefined; // Allow _findForward to descend
      }
      return value;
    },

    /**
     * Check if the first item is readable by a screen reader.
     *
     * @param {Object|string|Array} $element
     * @param {boolean} [checkParents=true] Check if parents are inaccessible.
     * @returns {boolean}
     */
    isReadable: function($element, checkParents) {
      var config = Adapt.a11y.config;
      $element = $($element).first();
      checkParents = checkParents === undefined;

      var $branch = checkParents
        ? $element.add($element.parents())
        : $element;

      var isNotVisible = _.find($branch.toArray(), function(item) {
        var $item = $(item);
        // make sure item is not explicitly invisible
        var isNotVisible = $item.css('display') === 'none' ||
          $item.css('visibility') === 'hidden' ||
          $item.attr('aria-hidden') === 'true';
        if (isNotVisible) {
          return true;
        }
      });
      if (isNotVisible) {
        return false;
      }

      // check that the component is natively tabbable or
      // will be knowingly read by a screen reader
      var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements) ||
        $element.is(config._options._readableElements);
      if (hasNativeFocusOrIsScreenReadable) {
        return true;
      }
      var childNodes = $element[0].childNodes;
      for (var c = 0, cl = childNodes.length; c < cl; c++) {
        var childNode = childNodes[c];
        var isTextNode = (childNode.nodeType === 3);
        if (!isTextNode) {
          continue;
        }
        var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);
        if (isOnlyWhiteSpace) {
          continue;
        }
        return true;
      }
      return undefined; // Allows _findForward to decend.
    },

    /**
     * Find forward in the DOM, descending and ascending to move forward
     * as appropriate.
     *
     * If the selector is a function it should returns true, false or undefined.
     * Returning true matches the item and returns it. Returning false means do
     * not match or descend into this item, returning undefined means do not match,
     * but descend into this item.
     *
     * @param {Object|string|Array} $element
     * @param {string|function|undefined} selector
     * @returns {Object} Returns found descendant.
     */
    _findFirstForward: function($element, selector) {
      $element = $($element).first();

      // make sure iterator is correct, use boolean or selector comparison
      // appropriately
      var iterator;
      switch (typeof selector) {
        case 'string':
          // make selector iterator
          iterator = function($tag) {
            return $tag.is(selector) || undefined;
          };
          break;
        case 'function':
          iterator = selector;
          break;
        case 'undefined':
          // find first next element
          iterator = Boolean;
      }

      if ($element.length === 0) {
        return $element.not('*');
      }

      // check children by walking the tree
      var $found = this._findFirstForwardDescendant($element, iterator);
      if ($found && $found.length) {
        return $found;
      }

      // check subsequent siblings
      var $nextSiblings = $element.nextAll().toArray();
      _.find($nextSiblings, function(sibling) {
        var $sibling = $(sibling);
        var value = iterator($sibling);

        // skip this sibling if explicitly instructed
        if (value === false) {
          return;
        }

        if (value) {
          // sibling matched
          $found = $sibling;
          return true;
        }

        // check parent sibling children by walking the tree
        $found = this._findFirstForwardDescendant($sibling, iterator);
        if ($found && $found.length) return true;
      }.bind(this));
      if ($found && $found.length) {
        return $found;
      }

      // move through parents towards the body element
      var $branch = $element.add($element.parents()).toArray().reverse();
      _.find($branch, function(parent) {
        var $parent = $(parent);
        if (iterator($parent) === false) {
          // skip this parent if explicitly instructed
          return false;
        }

        // move through parents nextAll siblings
        var $siblings = $parent.nextAll().toArray();
        return _.find($siblings, function(sibling) {
          var $sibling = $(sibling);
          var value = iterator($sibling);

          // skip this sibling if explicitly instructed
          if (value === false) {
            return;
          }

          if (value) {
            // sibling matched
            $found = $sibling;
            return true;
          }

          // check parent sibling children by walking the tree
          $found = this._findFirstForwardDescendant($sibling, iterator);
          if ($found && $found.length) {
            return true;
          }
        }.bind(this));
      }.bind(this));

      if (!$found || !$found.length) {
        return $element.not('*');
      }
      return $found;
    },

    /**
     * Find descendant in a DOM tree, work from selected to branch-end, through allowed
     * branch structures in hierarchy order
     *
     * If the selector is a function it should returns true, false or undefined.
     * Returning true matches the item and returns it. Returning false means do
     * not match or descend into this item, returning undefined means do not match,
     * but descend into this item.
     *
     * @param {Object|string|Array} $element jQuery element to start from.
     * @param {string|function|undefined} selector
     * @returns {Object} Returns found descendant.
     */
    _findFirstForwardDescendant: function($element, selector) {
      $element = $($element).first();

      // make sure iterator is correct, use boolean or selector comparison
      // appropriately
      var iterator;
      switch (typeof selector) {
        case 'string':
          // make selector iterator
          iterator = function($tag) {
            return $tag.is(selector) || undefined;
          };
          break;
        case 'function':
          iterator = selector;
          break;
        case 'undefined':
          // find first next element
          iterator = Boolean;
      }

      var $notFound = $element.not('*');
      if ($element.length === 0) {
        return $notFound;
      }

      // keep walked+passed children in a stack
      var stack = [{
        item: $element[0],
        value: undefined
      }];
      var stackIndexPosition = 0;
      var childIndexPosition = stackIndexPosition + 1;
      do {

        var stackEntry = stack[stackIndexPosition];
        var $stackItem = $(stackEntry.item);

        // check current item
        switch (stackEntry.value) {
          case true:
            return $stackItem;
          case false:
            return $notFound;
        }

        // get i stack children
        var $children = $stackItem.children().toArray();
        _.find($children, function(item) {
          var $item = $(item);
          var value = iterator($item);

          // item explicitly not allowed, don't add to stack,
          // skip children
          if (value === false) {
            return false;
          }

          // item passed or readable, add to stack before any parent
          // siblings
          stack.splice(childIndexPosition++, 0, {
            item: item,
            value: value
          });
        });

        // move to next stack item
        stackIndexPosition++;
        // keep place to inject children
        childIndexPosition = stackIndexPosition + 1;
      } while (stackIndexPosition < stack.length);

      return $notFound;
    },

    /**
     * Assign focus to the next readable element.
     *
     * @param {Object|string|Array} $element
     * @param {FocusOptions} options
     * @returns {Object} Returns `Adapt.a11y`
     */
    focusNext: function($element, options) {
      options = new FocusOptions(options);
      $element = $($element).first();
      $element = Adapt.a11y.findFirstReadable($element);
      this.focus($element, options);
      return this;
    },

    /**
     * Assign focus to either the specified element if it is readable or the
     * next readable element.
     *
     * @param {Object|string|Array} $element
     * @param {FocusOptions} options
     * @returns {Object} Returns `Adapt.a11y`
     */
    focusFirst: function($element, options) {
      options = new FocusOptions(options);
      $element = $($element).first();
      if (Adapt.a11y.isReadable($element)) {
        this.focus($element, options);
        return $element;
      }
      $element = Adapt.a11y.findFirstReadable($element);
      this.focus($element, options);
      return $element;
    },

    /**
     * Force focus to the specified element with/without a defer or scroll.
     *
     * @param {Object|string|Array} $element
     * @param {FocusOptions} options
     * @returns {Object} Returns `Adapt.a11y`
     */
    focus: function($element, options) {
      options = new FocusOptions(options);
      $element = $($element).first();
      var config = Adapt.a11y.config;
      if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
        return this;
      }
      function perform() {
        if (options.preventScroll) {
          var y = $(window).scrollTop();
          try {
            if ($element.attr('tabindex') === undefined) {
              $element.attr({
                'tabindex': '-1',
                'data-a11y-force-focus': 'true'
              });
            }
            $element[0].focus({
              preventScroll: true
            });
          } catch (e) {
            // Drop focus errors as only happens when the element
            // isn't attached to the DOM.
          }
          window.scrollTo(null, y);
        } else {
          $element[0].focus();
        }
      }
      if (options.defer) {
        _.defer(function() {
          perform();
        });
      } else {
        perform();
      }
      return this;
    },

    /**
     * Used to convert html to text aria-labels.
     *
     * @param {string} htmls Any html strings.
     * @returns {string} Returns text without markup or html encoded characters.
     */
    normalize: function(htmls) {
      var values = Array.prototype.slice.call(arguments, 0);
      values = values.filter(Boolean);
      values = values.filter(_.isString);
      htmls = values.join(' ');
      var text = $('<div>' + htmls + '</div>').html();
      // Remove all html encoded characters, such as &apos;
      return text.replace(this._htmlCharRegex, '');
    },

    /**
     * Removes all html tags except stylistic elements.
     * Useful for producing uninterrupted text for screen readers from
     * any html.
     *
     * @param  {string} htmls Any html strings.
     * @return {string} Returns html string without markup which would cause screen reader to pause.
     */
    removeBreaks: function(htmls) {
      var values = Array.prototype.slice.call(arguments, 0);
      values = values.filter(Boolean);
      values = values.filter(_.isString);
      htmls = values.join(' ');
      var $div = $('<div>' + htmls + '</div>');
      var stack = [ $div[0] ];
      var stackIndex = 0;
      var outputs = [];
      do {
        if (stack[stackIndex].childNodes.length) {
          var nodes = stack[stackIndex].childNodes;
          var usable = _.filter(nodes, function(node) {
            var isTextNode = (node.nodeType === 3);
            if (isTextNode) {
              return true;
            }
            var isStyleElement = $(node).is(Adapt.a11y.config._options._wrapStyleElements);
            if (isStyleElement) {
              return true;
            }
            return false;
          });
          outputs.push.apply(outputs, usable);
          stack.push.apply(stack, nodes);
        }
        stackIndex++;
      } while (stackIndex < stack.length);
      var rtnText = '';
      outputs.forEach(function(item) {
        rtnText += item.outerHTML || item.textContent;
      });
      return rtnText;
    },

    /**
     * @param {Object|string|Array} $elements
     * @returns {Object} Returns `Adapt.a11y`
     */
    scrollEnable: function($elements) {
      this._scroll.enable($elements);
      return this;
    },

    /**
     * @param {Object|string|Array} $elements
     * @returns {Object} Returns `Adapt.a11y`
     */
    scrollDisable: function($elements) {
      this._scroll.disable($elements);
      return this;
    },

    /**
     * To apply accessibilty handling to a tag, isolating the user.
     *
     * @param {Object} $popupElement Element encapsulating the popup.
     * @returns {Object} Returns `Adapt.a11y`
     */
    popupOpened: function($popupElement) {
      this._popup.opened($popupElement);
      return this;
    },

    /**
     * Remove the isolation applied with a call to `popupOpened`.
     *
     * @param {Object} [$focusElement] Element to move focus to.
     * @returns {Object} Returns `Adapt.a11y`
     */
    popupClosed: function($focusElement) {
      this._popup.closed($focusElement);
      return this;
    },

    /**
     * When a popup is open, this function makes it possible to swap the element
     * that should receive focus on popup close.
     *
     * @param {Object} $focusElement Set a new element to focus on.
     * @returns {Object} Returns previously set focus element.
     */
    setPopupCloseTo: function($focusElement) {
      return this._popup.setCloseTo($focusElement);
    }

  });

  return (Adapt.a11y = new A11y());

});

define('core/js/accessibility',[
  'core/js/adapt',
  './a11y'
], function(Adapt, a11y) {

  /**
   * Backwards compatibility `Adapt.accessibility` reroutes to `Adapt.a11y`
   * with a warning.
   */
  Object.defineProperty(Adapt, 'accessibility', {

    get: function() {
      a11y.log.deprecated('Adapt.accessibility has moved to Adapt.a11y');
      return (Adapt.accessibility = a11y);
    }

  });

});

define('core/js/collections/adaptCollection',[
  'core/js/adapt'
], function(Adapt) {

  var AdaptCollection = Backbone.Collection.extend({
    initialize: function(models, options) {
      this.url = options.url;

      this.once('reset', this.loadedData, this);
      if (this.url) {
        this.fetch({
          reset: true,
          error: _.bind(function(model, xhr, options) {
            console.error('ERROR: unable to load file ' + this.url);
          }, this)
        });
      }
    },

    loadedData: function() {
      Adapt.trigger('adaptCollection:dataLoaded');
    }

  });

  return AdaptCollection;

});

define('core/js/modelEvent',[],function() {

  var ModelEvent = Backbone.Controller.extend({

    type: null,
    target: null,
    value: null,
    canBubble: true,
    deepPath: null,
    timeStamp: null,

    /**
     * @param {string} type Event name / type
     * @param {Backbone.Model} target Origin model
     * @param {*} [value] Any value that should be carried through on the event
     */
    initialize: function(type, target, value) {
      this.type = type;
      this.target = target;
      this.value = value;
      this.deepPath = [target];
    },

    stopPropagation: function() {
      this.canBubble = false;
    },

    addPath: function(target) {
      this.deepPath.unshift(target);
    }

  });

  return ModelEvent;

});

define('core/js/enums/logLevelEnum',[],function() {

  // Used to determine if log call should be printed based on log level
  var LOG_LEVEL = ENUM([
    'DEBUG',
    'INFO',
    'WARN',
    'ERROR',
    'FATAL'
  ]);

  return LOG_LEVEL;

});

define('core/js/logging',[
  'core/js/adapt',
  'core/js/enums/logLevelEnum'
], function(Adapt, LOG_LEVEL) {

  var Logging = Backbone.Controller.extend({

    _config: {
      _isEnabled: true,
      _level: LOG_LEVEL.INFO.asLowerCase, // Default log level
      _console: true // Log to console
    },

    initialize: function() {

      Adapt.once('configModel:dataLoaded', this.onLoadConfigData.bind(this));

    },

    onLoadConfigData: function() {

      this.loadConfig();

      this.debug('Logging config loaded');

      this.trigger('log:ready');

    },

    loadConfig: function() {

      if (Adapt.config.has('_logging')) {
        this._config = Adapt.config.get('_logging');
      }

      this.checkQueryStringOverride();

    },

    checkQueryStringOverride: function() {

      // Override default log level with level present in query string
      var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
      if (!matches || matches.length < 2) return;

      var override = LOG_LEVEL(matches[1].toUpperCase());
      if (!override) return;

      this._config._level = override.asLowerCase;
      this.debug('Loglevel override in query string:', this._config._level);

    },

    debug: function() {
      this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));
    },

    info: function() {
      this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));
    },

    warn: function() {
      this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));
    },

    error: function() {
      this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));
    },

    fatal: function() {
      this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));
    },

    _log: function(level, data) {

      var isEnabled = (this._config._isEnabled);
      if (!isEnabled) return;

      var configLevel = LOG_LEVEL(this._config._level.toUpperCase());

      var isLogLevelAllowed = (level >= configLevel);
      if (!isLogLevelAllowed) return;

      this._logToConsole(level, data);

      // Allow error reporting plugins to hook and report to logging systems
      this.trigger('log', level, data);
      this.trigger('log:' + level.asLowerCase, level, data);

    },

    _logToConsole: function(level, data) {

      var shouldLogToConsole = (this._config._console);
      if (!shouldLogToConsole) return;

      var log = [level.asUpperCase + ':'];
      data && log.push.apply(log, data);

      // is there a matching console method we can use e.g. console.error()?
      if (console[level.asLowerCase]) {
        console[level.asLowerCase].apply(console, log);
      } else {
        console.log.apply(console, log);
      }
    }

  });

  Adapt.log = new Logging();

});

define('core/js/models/adaptModel',[
  'core/js/adapt',
  'core/js/modelEvent',
  'core/js/logging'
], function (Adapt, ModelEvent) {

  var AdaptModel = Backbone.Model.extend({

    defaults: {
      _canShowFeedback: true,
      _classes: '',
      _canReset: false,
      _isComplete: false,
      _isInteractionComplete: false,
      _isA11yRegionEnabled: false,
      _isA11yCompletionDescriptionEnabled: true,
      _requireCompletionOf: -1,
      _isEnabled: true,
      _isResetOnRevisit: false,
      _isAvailable: true,
      _isOptional: false,
      _isReady: false,
      _isVisible: true,
      _isLocked: false,
      _isHidden: false
    },

    trackable: [
      '_id',
      '_isComplete',
      '_isInteractionComplete'
    ],

    bubblingEvents: [
      'change:_isComplete',
      'change:_isInteractionComplete',
      'change:_isActive'
    ],

    initialize: function () {
      // Wait until data is loaded before setting up model
      this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);

    },

    setupModel: function() {
      if (this.get('_type') === 'page') {
        this._children = 'articles';
      }
      if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {
        this._parent = 'contentObjects';
      }
      if (this._children) {
        this.setupChildListeners();
      }

      this.init();

      _.defer(function() {
        if (this._children) {
          this.checkCompletionStatus();

          this.checkInteractionCompletionStatus();

          this.checkLocking();
        }

        this.setupTrackables();

      }.bind(this));

    },

    setupTrackables: function() {

      // Limit state trigger calls and make state change callbacks batched-asynchronous
      var originalTrackableStateFunction = this.triggerTrackableState;
      this.triggerTrackableState = _.compose(
        function() {

          // Flag that the function is awaiting trigger
          this.triggerTrackableState.isQueued = true;

        }.bind(this),
        _.debounce(function() {

          // Trigger original function
          originalTrackableStateFunction.apply(this);

          // Unset waiting flag
          this.triggerTrackableState.isQueued = false;

        }.bind(this), 17)
      );

      // Listen to model changes, trigger trackable state change when appropriate
      this.listenTo(this, 'change', function(model, value) {

        // Skip if trigger queued or adapt hasn't started yet
        if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {
          return;
        }

        // Check that property is trackable
        var trackablePropertyNames = _.result(this, 'trackable', []);
        var changedPropertyNames = _.keys(model.changed);
        var isTrackable = _.find(changedPropertyNames, function(item, index) {
          return _.contains(trackablePropertyNames, item);
        });

        if (isTrackable) {
          // Trigger trackable state change
          this.triggerTrackableState();
        }
      });
    },

    setupChildListeners: function() {
      var children = this.getChildren();
      if (!children.length) {
        return;
      }

      this.listenTo(children, {
        'all': this.onAll,
        'bubble': this.bubble,
        'change:_isReady': this.checkReadyStatus,
        'change:_isComplete': this.onIsComplete,
        'change:_isInteractionComplete': this.checkInteractionCompletionStatus
      });
    },

    init: function() {},

    getTrackableState: function() {

      var trackable = this.resultExtend('trackable', []);
      var json = this.toJSON();

      var args = trackable;
      args.unshift(json);

      return _.pick.apply(_, args);

    },

    setTrackableState: function(state) {

      var trackable = this.resultExtend('trackable', []);

      var args = trackable;
      args.unshift(state);

      state = _.pick.apply(_, args);

      this.set(state);

      return this;

    },

    triggerTrackableState: function() {

      Adapt.trigger('state:change', this, this.getTrackableState());

    },

    reset: function(type, force) {
      if (!this.get('_canReset') && !force) return;

      type = type || true;

      switch (type) {
        case 'hard': case true:
          this.set({
            _isEnabled: true,
            _isComplete: false,
            _isInteractionComplete: false
          });
          break;
        case 'soft':
          this.set({
            _isEnabled: true,
            _isInteractionComplete: false
          });
          break;
      }
    },

    checkReadyStatus: function () {
      // Filter children based upon whether they are available
      // Check if any return _isReady:false
      // If not - set this model to _isReady: true
      var children = this.getAvailableChildModels();
      if (_.find(children, function(child) { return child.get('_isReady') === false; })) {
        return;
      }

      this.set('_isReady', true);
    },

    setCompletionStatus: function() {
      if (!this.get('_isVisible')) return;

      this.set({
        _isComplete: true,
        _isInteractionComplete: true
      });
    },

    checkCompletionStatus: function () {
      // defer to allow other change:_isComplete handlers to fire before cascading to parent
      Adapt.checkingCompletion();
      _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
    },

    checkInteractionCompletionStatus: function () {
      // defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent
      Adapt.checkingCompletion();
      _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
    },

    /**
     * Function for checking whether the supplied completion attribute should be set to true or false.
     * It iterates over our immediate children, checking the same completion attribute on any mandatory child
     * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true;
     * if not, we set it to false.
     * @param {string} [completionAttribute] Either "_isComplete" or "_isInteractionComplete". Defaults to "_isComplete" if not supplied.
     */
    checkCompletionStatusFor: function(completionAttribute) {
      if (!completionAttribute) completionAttribute = '_isComplete';

      var completed = false;
      var children = this.getAvailableChildModels();
      var requireCompletionOf = this.get('_requireCompletionOf');

      if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed
        completed = (_.find(children, function(child) {
          return !child.get(completionAttribute) && !child.get('_isOptional');
        }) === undefined);
      } else {
        completed = (_.filter(children, function(child) {
          return child.get(completionAttribute) && !child.get('_isOptional');
        }).length >= requireCompletionOf);
      }

      this.set(completionAttribute, completed);

      Adapt.checkedCompletion();
    },

    /**
     * Searches the model's ancestors to find the first instance of the specified ancestor type
     * @param {string} [ancestorType] Valid values are 'course', 'pages', 'contentObjects', 'articles' or 'blocks'.
     * If left blank, the immediate ancestor (if there is one) is returned
     * @return {object} Reference to the model of the first ancestor of the specified type that's found - or `undefined` if none found
     */
    findAncestor: function (ancestorType) {
      var parent = this.getParent();
      if (!parent) return;

      if (ancestorType === 'pages') {
        ancestorType = 'contentObjects';
      }

      if (!ancestorType || this._parent === ancestorType) {
        return parent;
      }

      return parent.findAncestor(ancestorType);
    },

    /**
     * Returns all the descendant models of a specific type
     * @param {string} descendants Valid values are 'contentObjects', 'pages', 'menus', 'articles', 'blocks' or 'components'
     * @param {object} options an object that defines the search type and the properties/values to search on. Currently only the `where` search type (equivalent to `Backbone.Collection.where()`) is supported.
     * @param {object} options.where
     * @return {array}
     * @example
     * //find all available, non-optional components
     * this.findDescendantModels('components', { where: { _isAvailable: true, _isOptional: false }});
     */
    findDescendantModels: function(descendants, options) {

      var types = [
        descendants.slice(0, -1)
      ];
      if (descendants === 'contentObjects') {
        types.push('page', 'menu');
      }

      var allDescendantsModels = this.getAllDescendantModels();
      var returnedDescendants = allDescendantsModels.filter(function(model) {
        return _.contains(types, model.get('_type'));
      });

      if (!options) {
        return returnedDescendants;
      }

      if (options.where) {
        return returnedDescendants.filter(function(descendant) {
          for (var property in options.where) {
            var value = options.where[property];
            if (descendant.get(property) !== value) {
              return false;
            }
          }
          return true;
        });
      }
    },

    /**
     * Fetches the sub structure of a model as a flattened array
     *
     * Such that the tree:
     *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }
     *
     * will become the array (parent first = false):
     *  [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]
     *
     * or (parent first = true):
     *  [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]
     *
     * This is useful when sequential operations are performed on the menu/page/article/block/component hierarchy.
     * @param {boolean} [isParentFirst]
     * @return {array}
     */
    getAllDescendantModels: function(isParentFirst) {

      var descendants = [];

      if (this.get('_type') === 'component') {
        descendants.push(this);
        return descendants;
      }

      var children = this.getChildren();

      for (var i = 0, l = children.models.length; i < l; i++) {

        var child = children.models[i];
        if (child.get('_type') === 'component') {

          descendants.push(child);
          continue;

        }

        var subDescendants = child.getAllDescendantModels(isParentFirst);
        if (isParentFirst === true) {
          descendants.push(child);
        }

        descendants = descendants.concat(subDescendants);

        if (isParentFirst !== true) {
          descendants.push(child);
        }

      }

      return descendants;

    },

    /**
     * Returns a relative model from the Adapt hierarchy
     *
     * Such that in the tree:
     *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }
     *
     *  c1.findRelativeModel("@block +1") = b2;
     *  c1.findRelativeModel("@component +4") = c5;
     *
     * @see Adapt.parseRelativeString for a description of relativeStrings
     * @param {string} relativeString
     * @param {object} options Search configuration settings
     * @param {boolean} options.limitParentId
     * @param {function} options.filter
     * @param {boolean} options.loop
     * @return {array}
     */
    findRelativeModel: function(relativeString, options) {

      var types = [ 'menu', 'page', 'article', 'block', 'component' ];

      options = options || {};

      var modelId = this.get('_id');
      var modelType = this.get('_type');

      // return a model relative to the specified one if opinionated
      var rootModel = Adapt.course;
      if (options.limitParentId) {
        rootModel = Adapt.findById(options.limitParentId);
      }

      var relativeDescriptor = Adapt.parseRelativeString(relativeString);

      var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));
      var findSiblingType = (modelType === relativeDescriptor.type);

      var searchBackwards = (relativeDescriptor.offset < 0);
      var moveBy = Math.abs(relativeDescriptor.offset);
      var movementCount = 0;

      var findDescendantType = (!findSiblingType && !findAncestorType);

      if (findDescendantType) {
        // move by one less as first found is considered next
        moveBy--;
      }

      var pageDescendants;
      if (searchBackwards) {
        // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]
        pageDescendants = rootModel.getAllDescendantModels(true);

        // reverse so that we don't need a forward and a backward iterating loop
        // reversed [c9,c8,b4,a4,c7,c6,b3,a3,p2,c4,c3,b2,a2,c2,c1,b1,a1,p1]
        pageDescendants.reverse();
      } else {
        // children first [c1,c2,b1,a1,c3,c4,b2,a2,p1,c6,c7,b3,a3,c8,c9,b4,a4,p2]
        pageDescendants = rootModel.getAllDescendantModels(false);
      }

      // filter if opinionated
      if (typeof options.filter === 'function') {
        pageDescendants = _.filter(pageDescendants, options.filter);
      }

      // find current index in array
      var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {
        if (pageDescendant.get('_id') === modelId) {
          return true;
        }
        return false;
      });

      if (options.loop) {

        // normalize offset position to allow for overflow looping
        var typeCounts = {};
        pageDescendants.forEach(function(model) {
          var type = model.get('_type');
          typeCounts[type] = typeCounts[type] || 0;
          typeCounts[type]++;
        });
        moveBy = moveBy % typeCounts[relativeDescriptor.type];

        // double up entries to allow for overflow looping
        pageDescendants = pageDescendants.concat(pageDescendants.slice(0));

      }

      for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
        var descendant = pageDescendants[i];
        if (descendant.get('_type') === relativeDescriptor.type) {
          if (movementCount === moveBy) {
            return Adapt.findById(descendant.get('_id'));
          }
          movementCount++;
        }
      }

      return undefined;
    },

    getChildren: function () {
      if (this.get('_children')) return this.get('_children');

      var childrenCollection;

      if (!this._children) {
        childrenCollection = new Backbone.Collection();
      } else {
        var children = Adapt[this._children].where({ _parentId: this.get('_id') });
        childrenCollection = new Backbone.Collection(children);
      }

      if (this.get('_type') === 'block' &&
        childrenCollection.length === 2 &&
        childrenCollection.models[0].get('_layout') !== 'left') {
        // Components may have a 'left' or 'right' _layout,
        // so ensure they appear in the correct order
        // Re-order component models to correct it
        childrenCollection.comparator = '_layout';
        childrenCollection.sort();
      }

      this.set('_children', childrenCollection);

      return childrenCollection;
    },

    getAvailableChildModels: function() {
      return this.getChildren().where({
        _isAvailable: true
      });
    },

    getParent: function () {
      if (this.get('_parent')) return this.get('_parent');
      if (this._parent === 'course') {
        return Adapt.course;
      }
      var parent = Adapt.findById(this.get('_parentId'));
      this.set('_parent', parent);

      // returns a parent model
      return parent;
    },

    getAncestorModels: function(shouldIncludeChild) {
      var parents = [];
      var context = this;

      if (shouldIncludeChild) parents.push(context);

      while (context.has('_parentId')) {
        context = context.getParent();
        parents.push(context);
      }

      return parents.length ? parents : null;
    },

    getSiblings: function (passSiblingsAndIncludeSelf) {
      var siblings;
      if (!passSiblingsAndIncludeSelf) {
        // returns a collection of siblings excluding self
        if (this._hasSiblingsAndSelf === false) {
          return this.get('_siblings');
        }
        siblings = _.reject(Adapt[this._siblings].where({
          _parentId: this.get('_parentId')
        }), function (model) {
          return model.get('_id') === this.get('_id');
        }.bind(this));

        this._hasSiblingsAndSelf = false;

      } else {
        // returns a collection of siblings including self
        if (this._hasSiblingsAndSelf) {
          return this.get('_siblings');
        }

        siblings = Adapt[this._siblings].where({
          _parentId: this.get('_parentId')
        });
        this._hasSiblingsAndSelf = true;
      }

      var siblingsCollection = new Backbone.Collection(siblings);
      this.set('_siblings', siblingsCollection);
      return siblingsCollection;
    },

    setOnChildren: function (key, value, options) {

      var args = arguments;

      this.set.apply(this, args);

      if (!this._children) return;

      var children = this.getChildren();
      var models = children.models;
      for (var i = 0, len = models.length; i < len; i++) {
        var child = models[i];
        child.setOnChildren.apply(child, args);
      }

    },

    /**
     * @deprecated since v3.2.3 - please use `model.set('_isOptional', value)` instead
     */
    setOptional: function(value) {
      Adapt.log.warn("DEPRECATED - Use model.set('_isOptional', value) as setOptional() may be removed in the future");
      this.set({ _isOptional: value });
    },

    checkLocking: function() {
      var lockType = this.get('_lockType');

      if (!lockType) return;

      switch (lockType) {
        case 'sequential':
          this.setSequentialLocking();
          break;
        case 'unlockFirst':
          this.setUnlockFirstLocking();
          break;
        case 'lockLast':
          this.setLockLastLocking();
          break;
        case 'custom':
          this.setCustomLocking();
          break;
        default:
          console.warn('AdaptModel.checkLocking: unknown _lockType "' +
            lockType + '" found on ' + this.get('_id'));
      }
    },

    setSequentialLocking: function() {
      var children = this.getAvailableChildModels();

      for (var i = 1, j = children.length; i < j; i++) {
        children[i].set('_isLocked', !children[i - 1].get('_isComplete'));
      }
    },

    setUnlockFirstLocking: function() {
      var children = this.getAvailableChildModels();
      var isFirstChildComplete = children[0].get('_isComplete');

      for (var i = 1, j = children.length; i < j; i++) {
        children[i].set('_isLocked', !isFirstChildComplete);
      }
    },

    setLockLastLocking: function() {
      var children = this.getAvailableChildModels();
      var lastIndex = children.length - 1;

      for (var i = lastIndex - 1; i >= 0; i--) {
        if (!children[i].get('_isComplete')) {
          return children[lastIndex].set('_isLocked', true);
        }
      }

      children[lastIndex].set('_isLocked', false);
    },

    setCustomLocking: function() {
      var children = this.getAvailableChildModels();

      for (var i = 0, j = children.length; i < j; i++) {
        var child = children[i];
        child.set('_isLocked', this.shouldLock(child));

        if (child.get('_type') === 'menu') {
          child.checkLocking();
        }

      }
    },

    shouldLock: function(child) {
      var lockedBy = child.get('_lockedBy');

      if (!lockedBy) return false;

      for (var i = lockedBy.length - 1; i >= 0; i--) {
        var id = lockedBy[i];

        try {
          var model = Adapt.findById(id);

          if (!model.get('_isAvailable')) continue;
          if (!model.get('_isComplete')) return true;
        } catch (e) {
          console.warn('AdaptModel.shouldLock: unknown _lockedBy ID "' + id +
            '" found on ' + child.get('_id'));
        }
      }

      return false;
    },

    onIsComplete: function() {
      this.checkCompletionStatus();

      this.checkLocking();
    },

    /**
     * Internal event handler for all module events. Triggers event bubbling
     * through the module hierarchy when the event is included in
     * `this.bubblingEvents`.
     * @param {string} type Event name / type
     * @param {Backbone.Model} model Origin backbone model
     * @param {*} value New property value
     */
    onAll: function(type, model, value) {
      if (!_.contains(this.bubblingEvents, type)) return;
      var event = new ModelEvent(type, model, value);
      this.bubble(event);
    },

    /**
     * Internal event handler for bubbling events.
     * @param {ModelEvent} event
     */
    bubble: function(event) {
      if (!event.canBubble) return;
      event.addPath(this);
      this.trigger('bubble:' + event.type + ' bubble', event);
    }

  });

  return AdaptModel;

});

define('core/js/models/articleModel',[
  'core/js/models/adaptModel'
], function (AdaptModel) {

  var ArticleModel = AdaptModel.extend({
    _parent: 'contentObjects',
    _siblings: 'articles',
    _children: 'blocks'
  });

  return ArticleModel;

});

define('core/js/models/blockModel',[
  'core/js/models/adaptModel'
], function (AdaptModel) {

  var BlockModel = AdaptModel.extend({
    _parent: 'articles',
    _siblings: 'blocks',
    _children: 'components'
  });

  return BlockModel;

});

define('core/js/models/configModel',[
  'core/js/adapt'
], function (Adapt) {

  var ConfigModel = Backbone.Model.extend({

    defaults: {
      screenSize: {
        large: 900,
        medium: 760,
        small: 520
      },
      _forceRouteLocking: false,
      _canLoadData: true,
      _disableAnimation: false
    },

    initialize: function(attrs, options) {
      this.url = options.url;
      // Fetch data & if successful trigger event to enable plugins to stop course files loading
      // Then check if course files can load
      // 'configModel:loadCourseData' event starts the core content collections and models being fetched
      this.fetch({
        success: function() {
          Adapt.trigger('offlineStorage:prepare');

          Adapt.wait.queue(function() {

            Adapt.trigger('configModel:dataLoaded');

            if (this.get('_canLoadData')) {
              Adapt.trigger('configModel:loadCourseData');
            }

          }.bind(this));
        }.bind(this),
        error: function() {
          console.log('Unable to load course/config.json');
        }
      });
    },

    loadData: function() {

    }

  });

  return ConfigModel;

});

define('core/js/models/contentObjectModel',[
  'core/js/models/adaptModel'
], function (AdaptModel) {

  var ContentObjectModel = AdaptModel.extend({
    _parent: 'course',
    _siblings: 'contentObjects',
    _children: 'contentObjects'
  });

  return ContentObjectModel;

});

define('core/js/models/componentModel',[
  'core/js/models/adaptModel'
], function (AdaptModel) {

  var ComponentModel = AdaptModel.extend({
    _parent: 'blocks',
    _siblings: 'components',

    defaults: AdaptModel.resultExtend('defaults', {
      _isA11yComponentDescriptionEnabled: true
    }),

    trackable: AdaptModel.resultExtend('trackable', [
      '_userAnswer'
    ])

  });

  return ComponentModel;

});

define('core/js/models/courseModel',[
  'core/js/adapt',
  'core/js/models/adaptModel'
], function (Adapt, AdaptModel) {

  var CourseModel = AdaptModel.extend({

    initialize: function(attrs, options) {
      AdaptModel.prototype.initialize.apply(this, arguments);
      Adapt.trigger('courseModel:dataLoading');

      this.url = options.url;

      this.on('sync', this.loadedData, this);
      if (this.url) {
        this.fetch({
          error: _.bind(function(model, xhr, options) {
            console.error('ERROR: unable to load file ' + this.url);
          }, this)
        });
      }
    },

    loadedData: function() {
      Adapt.trigger('courseModel:dataLoaded');
    },

    _children: 'contentObjects'

  });

  return CourseModel;

});

define('core/js/enums/buttonStateEnum',[],function() {

  var BUTTON_STATE = ENUM([
    'SUBMIT',
    'CORRECT',
    'INCORRECT',
    'SHOW_CORRECT_ANSWER',
    'HIDE_CORRECT_ANSWER',
    'SHOW_FEEDBACK',
    'RESET'
  ]);

  return BUTTON_STATE;

});

define('core/js/models/questionModel',[
  'core/js/adapt',
  'core/js/models/componentModel',
  'core/js/enums/buttonStateEnum'
], function(Adapt, ComponentModel, BUTTON_STATE) {

  var QuestionModel = ComponentModel.extend({

    /// ///
    // Setup question types
    /// /

    // Used to set model defaults
    defaults: function() {
      // Extend from the ComponentModel defaults
      return ComponentModel.resultExtend('defaults', {
        _isQuestionType: true,
        _shouldDisplayAttempts: false,
        _canShowModelAnswer: true,
        _canShowFeedback: true,
        _canShowMarking: true,
        _isSubmitted: false,
        _questionWeight: Adapt.config.get('_questionWeight'),
        _items: []
      });
    },

    // Extend from the ComponentModel trackable
    trackable: ComponentModel.resultExtend('trackable', [
      '_isSubmitted',
      '_score',
      '_isCorrect',
      '_attemptsLeft'
    ]),

    init: function() {
      this.setupDefaultSettings();
      this.listenToOnce(Adapt, 'adapt:initialize', this.onAdaptInitialize);
    },

    // Calls default methods to setup on questions
    setupDefaultSettings: function() {
      // Not sure this is needed anymore, keeping to maintain API
      this.setupWeightSettings();
      this.setupButtonSettings();
    },

    // Used to setup either global or local button text
    setupButtonSettings: function() {
      var globalButtons = Adapt.course.get('_buttons');

      // Check if  '_buttons' attribute exists and if not use the globally defined buttons.
      if (!this.has('_buttons')) {
        this.set('_buttons', globalButtons);
      } else {
        // Check all the components buttons.
        // If they are empty use the global defaults.
        var componentButtons = this.get('_buttons');

        for (var key in componentButtons) {
          if (typeof componentButtons[key] === 'object') {
            // Button text.
            if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
              componentButtons[key].buttonText = globalButtons[key].buttonText;
            }

            // ARIA labels.
            if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
              componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
            }
          }

          if (!componentButtons[key] && globalButtons[key]) {
            componentButtons[key] = globalButtons[key];
          }
        }
      }
    },

    // Used to setup either global or local question weight/score
    setupWeightSettings: function() {
      // Not needed as handled by model defaults, keeping to maintain API
    },

    /// ///
    // Selection restoration process
    /// /

    // Used to add post-load changes to the model
    onAdaptInitialize: function() {
      this.restoreUserAnswers();
    },

    // Used to restore the user answers
    restoreUserAnswers: function() {},

    /// ///
    // Submit process
    /// /

    // Use to check if the user is allowed to submit the question
    // Maybe the user has to select an item?
    canSubmit: function() {},

    // Used to update the amount of attempts the user has left
    updateAttempts: function() {
      if (!this.get('_attemptsLeft')) {
        this.set('_attemptsLeft', this.get('_attempts'));
      }
      this.set('_attemptsLeft', this.get('_attemptsLeft') - 1);
    },

    // Used to set _isEnabled and _isSubmitted on the model
    setQuestionAsSubmitted: function() {
      this.set({
        _isEnabled: false,
        _isSubmitted: true
      });
    },

    // This is important for returning or showing the users answer
    // This should preserve the state of the users answers
    storeUserAnswer: function() {},

    // Sets _isCorrect:true/false based upon isCorrect method below
    markQuestion: function() {

      if (this.isCorrect()) {
        this.set('_isCorrect', true);
      } else {
        this.set('_isCorrect', false);
      }

    },

    // Should return a boolean based upon whether to question is correct or not
    isCorrect: function() {},

    // Used to set the score based upon the _questionWeight
    setScore: function() {},

    // Checks if the question should be set to complete
    // Calls setCompletionStatus and adds complete classes
    checkQuestionCompletion: function() {

      var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);

      if (isComplete) {
        this.setCompletionStatus();
      }

      return isComplete;

    },

    // Updates buttons based upon question state by setting
    // _buttonState on the model which buttonsView listens to
    updateButtons: function() {

      var isInteractionComplete = this.get('_isInteractionComplete');
      var isCorrect = this.get('_isCorrect');
      var isEnabled = this.get('_isEnabled');
      var buttonState = this.get('_buttonState');
      var canShowModelAnswer = this.get('_canShowModelAnswer');

      if (isInteractionComplete) {

        if (isCorrect || !canShowModelAnswer) {
          // Use correct instead of complete to signify button state
          this.set('_buttonState', BUTTON_STATE.CORRECT);

        } else {

          switch (buttonState) {
            case BUTTON_STATE.SUBMIT:
            case BUTTON_STATE.HIDE_CORRECT_ANSWER:
              this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);
              break;
            default:
              this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);
          }

        }

      } else {

        if (isEnabled) {
          this.set('_buttonState', BUTTON_STATE.SUBMIT);
        } else {
          this.set('_buttonState', BUTTON_STATE.RESET);
        }
      }

    },

    // Used to setup the correct, incorrect and partly correct feedback
    setupFeedback: function() {
      if (!this.has('_feedback')) return;

      if (this.get('_isCorrect')) {
        this.setupCorrectFeedback();
      } else if (this.isPartlyCorrect()) {
        this.setupPartlyCorrectFeedback();
      } else {
        this.setupIncorrectFeedback();
      }
    },

    // Used by the question to determine if the question is incorrect or partly correct
    // Should return a boolean
    isPartlyCorrect: function() {},

    setupCorrectFeedback: function() {
      this.set({
        feedbackTitle: this.getFeedbackTitle(),
        feedbackMessage: this.get('_feedback').correct
      });
    },

    setupPartlyCorrectFeedback: function() {
      var feedback = this.get('_feedback')._partlyCorrect;

      if (feedback && feedback.final) {
        this.setAttemptSpecificFeedback(feedback);
      } else {
        this.setupIncorrectFeedback();
      }
    },

    setupIncorrectFeedback: function() {
      this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
    },

    setAttemptSpecificFeedback: function(feedback) {
      var body = (this.get('_attemptsLeft') && feedback.notFinal) || feedback.final;

      this.set({
        feedbackTitle: this.getFeedbackTitle(),
        feedbackMessage: body
      });
    },

    getFeedbackTitle: function() {
      return this.get('_feedback').title || this.get('displayTitle') || this.get('title') || '';
    },

    /**
     * Used to determine whether the learner is allowed to interact with the question component or not.
     * @return {Boolean}
     */
    isInteractive: function() {
      return !this.get('_isComplete') || (this.get('_isEnabled') && !this.get('_isSubmitted'));
    },

    // Reset the model to let the user have another go (not the same as attempts)
    reset: function(type, force) {
      if (!this.get('_canReset') && !force) return;

      type = type || true; // hard reset by default, can be "soft", "hard"/true

      ComponentModel.prototype.reset.call(this, type, force);

      var attempts = this.get('_attempts');
      this.set({
        _attemptsLeft: attempts,
        _isCorrect: undefined,
        _isSubmitted: false,
        _buttonState: BUTTON_STATE.SUBMIT
      });
    },

    // Reset question for subsequent attempts
    setQuestionAsReset: function() {
      this.set({
        _isEnabled: true,
        _isSubmitted: false
      });
    },

    // Used by the question view to reset the stored user answer
    resetUserAnswer: function() {},

    refresh: function() {
      this.trigger('question:refresh');
    },

    getButtonState: function() {
      if (this.get('_isCorrect')) {
        return BUTTON_STATE.CORRECT;
      }

      if (this.get('_attemptsLeft') === 0) {
        return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;
      }

      return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;
    },

    // Returns an object specific to the question type, e.g. if the question
    // is a 'choice' this should contain an object with:
    // - correctResponsesPattern[]
    // - choices[]
    getInteractionObject: function() {
      return {};
    },

    // Returns a string detailing how the user answered the question.
    getResponse: function() {},

    // Returns a string describing the type of interaction: "choice" and "matching" supported (see scorm wrapper)
    getResponseType: function() {}

  });

  return QuestionModel;

});

define('core/js/models/buildModel',[
  'core/js/adapt',
  'core/js/logging'
], function (Adapt) {

  var BuildModel = Backbone.Model.extend({

    defaults: {
      jsonext: 'json'
    },

    initialize: function(attrs, options) {
      this.url = options.url;
      // Fetch data & if successful trigger event to enable plugins to stop course files loading
      // Then check if course files can load
      // 'configModel:loadCourseData' event starts the core content collections and models being fetched
      this.fetch({
        success: _.bind(function() {
          this.isLoaded = true;
          Adapt.trigger('buildModel:dataLoaded');
        }, this),
        error: function() {
          console.log('Unable to load adapt/js/build.js');
          Adapt.trigger('buildModel:dataLoaded');
        }
      });
    },

    whenReady: function() {
      if (this.isLoaded) return Promise.resolve();
      return new Promise(function (resolve) {
        Adapt.once('buildModel:dataLoaded', resolve);
      });
    }

  });

  return (Adapt.build = new BuildModel(null, { url: 'adapt/js/build.min.js', reset: true }));

});

define('core/js/startController',[
  'core/js/adapt'
], function(Adapt) {

  var StartController = Backbone.Controller.extend({

    model: null,

    loadCourseData: function() {
      this.model = new Backbone.Model(Adapt.course.get('_start'));
    },

    setStartLocation: function() {
      if (!this.isEnabled()) return;
      window.history.replaceState('', '', this.getStartHash());
    },

    returnToStartLocation: function() {
      var startIds = this.model.get('_startIds');
      if (startIds) {
        // ensure we can return to the start page even if it is completed
        startIds.forEach(function(startId) {
          startId._skipIfComplete = false;
        });
      }
      window.location.hash = this.getStartHash(true);
    },

    /**
     * Returns a string in URL.hash format representing the route that the course should be sent to
     * @param {boolean} [alwaysForce] Ignore any route specified in location.hash and force use of the start page instead
     * @return {string}
     */
    getStartHash: function(alwaysForce) {
      var startId = this.getStartId();
      var isRouteSpecified = window.location.href.indexOf('#') > -1;
      var shouldForceStartId = alwaysForce || this.model.get('_force');
      var shouldNavigateToStartId = startId && (!isRouteSpecified || shouldForceStartId);

      if (shouldNavigateToStartId && startId !== Adapt.course.get('_id')) {
        return '#/id/' + startId;
      }

      // If there's a route specified in location.hash, use that - otherwise go to main menu
      return window.location.hash || '#/';
    },

    isEnabled: function() {
      if (!this.model || !this.model.get('_isEnabled')) return false;
      return true;
    },

    getStartId: function() {
      var startId = this.model.get('_id');
      var startIds = this.model.get('_startIds');

      if (!startIds || !startIds.length) return startId;

      var $html = $('html');
      for (var i = 0, l = startIds.length; i < l; i++) {
        var item = startIds[i];
        var className = item._className;
        var skipIfComplete = item._skipIfComplete;

        var model = Adapt.findById(item._id);

        if (!model) {
          console.log('startController: cannot find id', item._id);
          continue;
        }

        if (skipIfComplete) {
          if (model.get('_isComplete')) continue;
        }

        if (!className || $html.is(className) || $html.hasClass(className)) {
          // See https://github.com/adaptlearning/adapt_framework/issues/1843
          startId = item._id;
          break;
        }
      }

      return startId;
    }

  });

  Adapt.once('adapt:start', function() {
    Adapt.startController.loadCourseData();
    Adapt.startController.setStartLocation();
  });

  /*
  * allows you to call returnToStartLocation either by calling `Adapt.trigger('navigation:returnToStart')`
  * or by including in the top navigation bar a button that has the attribute `data-event="returnToStart"`
  */
  Adapt.on('navigation:returnToStart', function() {
    Adapt.startController.returnToStartLocation();
  });

  return (Adapt.startController = new StartController());

});

define('core/js/data',[
  'core/js/adapt',
  'core/js/collections/adaptCollection',
  'core/js/models/articleModel',
  'core/js/models/blockModel',
  'core/js/models/configModel',
  'core/js/models/contentObjectModel',
  'core/js/models/componentModel',
  'core/js/models/courseModel',
  'core/js/models/questionModel',
  'core/js/models/lockingModel',
  'core/js/models/buildModel',
  'core/js/startController'
], function(Adapt, AdaptCollection, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel) {

  var Data = Backbone.Controller.extend({

    mappedIds: {},

    init: function () {
      Adapt.build.whenReady().then(this.onBuildDataLoaded.bind(this));
    },

    onBuildDataLoaded: function() {
      $('html').attr('data-adapt-framework-version', Adapt.build.get('package').version);
      Adapt.config = new ConfigModel(null, { url: 'course/config.' + Adapt.build.get('jsonext'), reset: true });
      Adapt.config.on({
        'change:_activeLanguage': this.onLanguageChange.bind(this),
        'change:_defaultDirection': this.onDirectionChange.bind(this)
      });

      // Events that are triggered by the main Adapt content collections and models
      Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));
    },

    onLanguageChange: function(model, language) {
      Adapt.offlineStorage.set('lang', language);
      this.loadCourseData(this.triggerDataReady.bind(this), language);
    },

    onDirectionChange: function(model, direction) {
      if (direction === 'rtl') {
        $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
      } else {
        $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
      }
    },

    /**
     * Before we actually go to load the course data, we first need to check to see if a language has been set
     * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json
     */
    onLoadCourseData: function() {
      if (Adapt.config.get('_activeLanguage')) {
        this.loadCourseData(this.triggerDataReady.bind(this));
      } else {
        Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));
      }
    },

    loadCourseData: function(callback, newLanguage) {
      Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {
        this.checkDataIsLoaded(callback, newLanguage);
      }.bind(this));

      // All code that needs to run before adapt starts should go here
      var language = Adapt.config.get('_activeLanguage');
      var jsonext = Adapt.build.get('jsonext');
      var courseFolder = 'course/' + language + '/';

      $('html').attr('lang', language);

      Adapt.course = new CourseModel(null, { url: courseFolder + 'course.' + jsonext, reset: true });

      Adapt.contentObjects = new AdaptCollection(null, {
        model: ContentObjectModel,
        url: courseFolder + 'contentObjects.' + jsonext
      });

      Adapt.articles = new AdaptCollection(null, {
        model: ArticleModel,
        url: courseFolder + 'articles.' + jsonext
      });

      Adapt.blocks = new AdaptCollection(null, {
        model: BlockModel,
        url: courseFolder + 'blocks.' + jsonext
      });

      Adapt.components = new AdaptCollection(null, {
        model: function(json) {

          // use view+model object
          var ViewModelObject = Adapt.componentStore[json._component];

          if (!ViewModelObject) {
            throw new Error('One or more components of type "' + json._component + '" were included in the course - but no component of that type is installed...');
          }

          // if model defined for component use component model
          if (ViewModelObject.model) {
            // eslint-disable-next-line new-cap
            return new ViewModelObject.model(json);
          }

          var View = ViewModelObject.view || ViewModelObject;
          // if question type use question model
          if (View._isQuestionType) {
            return new QuestionModel(json);
          }

          // otherwise use component model
          return new ComponentModel(json);
        },
        url: courseFolder + 'components.' + jsonext
      });
    },

    checkDataIsLoaded: function(callback, newLanguage) {
      if (Adapt.contentObjects.models.length > 0 &&
        Adapt.articles.models.length > 0 &&
        Adapt.blocks.models.length > 0 &&
        Adapt.components.models.length > 0 &&
        Adapt.course.get('_id')) {

        this.mapAdaptIdsToObjects();

        Adapt.log.debug('Firing app:dataLoaded');

        try {
          Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js
        } catch (e) {
          Adapt.log.error('Error during app:dataLoading trigger', e);
        }

        this.setupMapping();

        Adapt.wait.queue(function() {
          callback(newLanguage);
        });

      }
    },

    mapAdaptIdsToObjects: function () {
      Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy('_id');
      Adapt.articles._byAdaptID = Adapt.articles.groupBy('_id');
      Adapt.blocks._byAdaptID = Adapt.blocks.groupBy('_id');
      Adapt.components._byAdaptID = Adapt.components.groupBy('_id');
    },

    setupMapping: function() {
      this.mappedIds = {};

      // Setup course Id
      this.mappedIds[Adapt.course.get('_id')] = 'course';

      var collections = ['contentObjects', 'articles', 'blocks', 'components'];

      collections.forEach(function(collection) {
        Adapt[collection].models.forEach(function(model) {
          var id = model.get('_id');
          this.mappedIds[id] = collection;
        }.bind(this));
      }.bind(this));
    },

    triggerDataReady: function(newLanguage) {
      if (newLanguage) {

        Adapt.trigger('app:languageChanged', newLanguage);

        _.defer(function() {
          Adapt.startController.loadCourseData();
          var hash = '#/';

          if (Adapt.startController.isEnabled()) {
            hash = Adapt.startController.getStartHash(true);
          }

          Backbone.history.navigate(hash, { trigger: true, replace: true });
        });
      }

      Adapt.log.debug('Firing app:dataReady');

      try {
        Adapt.trigger('app:dataReady');
      } catch (e) {
        Adapt.log.error('Error during app:dataReady trigger', e);
      }

      Adapt.wait.queue(this.triggerInit.bind(this));

    },

    triggerInit: function() {
      this.isReady = true;
      this.trigger('ready');
    },

    whenReady: function() {
      if (this.isReady) return Promise.resolve();

      return new Promise(function (resolve) {
        this.once('ready', resolve);
      }.bind(this));
    },

    /**
     * Looks up which collection a model belongs to
     * @param {string} id The id of the item you want to look up e.g. `"co-05"`
     * @return {string} One of the following (or `undefined` if not found):
     * - "course"
     * - "contentObjects"
     * - "blocks"
     * - "articles"
     * - "components"
     */
    mapById: function(id) {
      return this.mappedIds[id];
    },

    /**
     * Looks up a model by its `_id` property
     * @param {string} id The id of the item e.g. "co-05"
     * @return {Backbone.Model}
     */
    findById: function(id) {
      if (id === Adapt.course.get('_id')) {
        return Adapt.course;
      }

      var collectionType = Adapt.mapById(id);

      if (!collectionType) {
        console.warn('Adapt.findById() unable to find collection type for id: ' + id);
        return;
      }

      return Adapt[collectionType]._byAdaptID[id][0];
    }

  });

  return (Adapt.data = new Data());

});

define('core/js/offlineStorage',[
  'core/js/adapt'
], function(Adapt) {

  // Basic API for setting and getting name+value pairs
  // Allows registration of a single handler.

  var OfflineStorage = Backbone.Controller.extend({

    /**
     * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)
     * this can still be accessed OK
     */
    ready: true,
    _handler: undefined,

    /**
     * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know
     * it's ready before we can safely use offlineStorage
     */
    initialize: function(handler) {
      if (!handler) {
        return;
      }

      this.ready = false;
      this._handler = handler;
    },

    /**
     * Flag to indicate if an offlineStorage handler has been defined.
     * @returns {boolean} true if an offlineStorage handler has been defined, false otherwise
     */
    hasHandler: function() {
      return this._handler !== undefined;
    },

    set: function(name, value) {
      if (this._handler && this._handler.set) {
        return this._handler.set.apply(this._handler, arguments);
      }
      // if no handler has been defined, just store the data locally
      this[name] = value;
    },

    get: function(name) {
      if (this._handler && this._handler.get) {
        return this._handler.get.apply(this._handler, arguments);
      }
      // if no handler has been defined, check local data store
      return this[name];
    },

    /**
     * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used
     */
    setReadyStatus: function() {
      this.ready = true;
      Adapt.trigger('offlineStorage:ready');
    }

  });

  Adapt.offlineStorage = new OfflineStorage();

  return Adapt.offlineStorage;

});

define('core/js/enums/completionStateEnum',[],function() {

  var COMPLETION_STATE = ENUM([
    'INCOMPLETE',
    'COMPLETED',
    'PASSED',
    'FAILED'
  ]);

  return COMPLETION_STATE;

});

define('core/js/tracking',[
  'core/js/adapt',
  'core/js/enums/completionStateEnum'
], function(Adapt, COMPLETION_STATE) {

  var Tracking = Backbone.Controller.extend({

    _config: {
      _requireContentCompleted: true,
      _requireAssessmentCompleted: false
    },

    _assessmentState: null,

    initialize: function() {
      Adapt.once('configModel:dataLoaded', this.loadConfig.bind(this));
      Adapt.on('app:dataReady', this.setupEventListeners.bind(this));
    },

    setupEventListeners: function() {
      // Check if completion requires passing an assessment.
      if (this._config._requireAssessmentCompleted) {
        this.listenTo(Adapt, {
          'assessment:complete': this.onAssessmentComplete,
          'assessment:restored': this.onAssessmentRestored
        });
      }

      // Check if completion requires completing all content.
      if (this._config._requireContentCompleted) {
        this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);
      }
    },

    /**
     * Store the assessment state.
     * @param {object} assessmentState - The object returned by Adapt.assessment.getState()
     */
    onAssessmentComplete: function(assessmentState) {
      this._assessmentState = assessmentState;

      this.checkCompletion();
    },

    /**
     * Restores the _assessmentState object when an assessment is registered.
     * @param {object} assessmentState - An object representing the overall assessment state
     */
    onAssessmentRestored: function(assessmentState) {
      this._assessmentState = assessmentState;
    },

    /**
     * Evaluate the course and assessment completion.
     */
    checkCompletion: function() {
      var completionData = this.getCompletionData();

      if (completionData.status === COMPLETION_STATE.INCOMPLETE) {
        return;
      }

      Adapt.trigger('tracking:complete', completionData);
      Adapt.log.debug('tracking:complete', completionData);
    },

    /**
     * The return value of this function should be passed to the trigger of 'tracking:complete'.
     * @returns An object representing the user's course completion.
     */
    getCompletionData: function() {
      var completionData = {
        status: COMPLETION_STATE.INCOMPLETE,
        assessment: null
      };

      // Course complete is required.
      if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {
        // INCOMPLETE: course not complete.
        return completionData;
      }

      // Assessment completed required.
      if (this._config._requireAssessmentCompleted) {
        if (!this._assessmentState) {
          // INCOMPLETE: assessment is not complete.
          return completionData;
        }

        // PASSED/FAILED: assessment completed.
        completionData.status = this._assessmentState.isPass ? COMPLETION_STATE.PASSED : COMPLETION_STATE.FAILED;
        completionData.assessment = this._assessmentState;

        return completionData;
      }

      // COMPLETED: criteria met, no assessment requirements.
      completionData.status = COMPLETION_STATE.COMPLETED;

      return completionData;
    },

    /**
     * Set the _config object to the values retrieved from config.json.
     */
    loadConfig: function() {
      if (Adapt.config.has('_completionCriteria')) {
        this._config = Adapt.config.get('_completionCriteria');
      }
    }

  });

  Adapt.tracking = new Tracking();

  return Adapt.tracking;

});

define('core/js/device',[
  'core/js/adapt',
  'bowser'
], function(Adapt, Bowser) {

  var $html = $('html');
  var $window = $(window);

  Adapt.device = {
    touch: Modernizr.touchevents,
    screenWidth: getScreenWidth(),
    screenHeight: getScreenHeight(),
    browser: (Bowser.name || '').toLowerCase(),
    version: (Bowser.version || '').toLowerCase(),
    OS: getOperatingSystem().toLowerCase(),
    osVersion: Bowser.osversion || '',
    renderingEngine: getRenderingEngine()
  };

  // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,
  // as both these functions are getters, essentially.
  Object.defineProperties(Adapt.device, {
    'orientation': {
      get: function () {
        return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';
      }
    },
    'aspectRatio': {
      get: function () {
        return this.screenWidth / this.screenHeight;
      }
    }
  });

  Adapt.once('app:dataReady', function() {
    Adapt.device.screenSize = checkScreenSize();

    $html.addClass('size-' + Adapt.device.screenSize);

    if (Adapt.device.orientation) {
      $html.addClass('orientation-' + Adapt.device.orientation);
    }

    // As Adapt.config is available it's ok to bind the 'resize'.
    $window.on('resize orientationchange', onWindowResize);
  });

  /**
   * Compares the calculated screen width to the breakpoints defined in config.json.
   *
   * @returns {string} 'large', 'medium' or 'small'
   */
  function checkScreenSize() {
    var screenSizeConfig = Adapt.config.get('screenSize');
    var screenSize;

    var screensizeEmThreshold = 300;
    var baseFontSize = 16;

    // Check to see if the screen size value is larger than the em threshold
    // If value is larger than em threshold, convert value (assumed px) to ems
    // Otherwise assume value is in ems
    var mediumEmBreakpoint = screenSizeConfig.medium > screensizeEmThreshold
      ? screenSizeConfig.medium / baseFontSize
      : screenSizeConfig.medium;
    var smallEmBreakpoint = screenSizeConfig.small > screensizeEmThreshold
      ? screenSizeConfig.small / baseFontSize
      : screenSizeConfig.small;

    var fontSize = parseFloat($('html').css('font-size'));
    var screenSizeEmWidth = (Adapt.device.screenWidth / fontSize);

    // Check to see if client screen width is larger than medium em breakpoint
    // If so apply large, otherwise check to see if client screen width is
    // larger than small em breakpoint. If so apply medium, otherwise apply small
    if (screenSizeEmWidth > mediumEmBreakpoint) {
      screenSize = 'large';
    } else if (screenSizeEmWidth > smallEmBreakpoint) {
      screenSize = 'medium';
    } else {
      screenSize = 'small';
    }

    return screenSize;
  }

  function getScreenWidth() {
    return isAppleDevice()
      ? getAppleScreenWidth()
      : window.innerWidth || $window.width();
  }

  function getScreenHeight() {
    return isAppleDevice()
      ? getAppleScreenHeight()
      : window.innerHeight || $window.height();
  }

  function getOperatingSystem() {
    var os = '';
    var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',
      'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];

    for (var i = 0; i < flags.length; i++) {
      if (Bowser[flags[i]]) {
        os = flags[i];
        break;
      }
    }

    if (os === '') {
      // Fall back to using navigator.platform in case Bowser can't detect the OS.
      var platform = navigator.platform;
      var platforms = ['Win', 'Mac', 'Linux'];
      os = 'PlatformUnknown';

      for (var j = 0; j < platforms.length; j++) {
        if (platform.indexOf(platforms[j]) !== -1) {
          os = platforms[j].toLowerCase();
          break;
        }
      }

      // Set consistency with the Bowser flags.
      if (os === 'win') {
        os = 'windows';
      }
    }

    return os;
  }

  function getRenderingEngine() {
    var engine = '';
    var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];

    for (var i = 0; i < flags.length; i++) {
      if (Bowser[flags[i]]) {
        engine = flags[i];
        break;
      }
    }

    return engine;
  }

  var onWindowResize = _.debounce(function onScreenSizeChanged() {
    // Calculate the screen properties.
    var previousWidth = Adapt.device.screenWidth;
    var previousHeight = Adapt.device.screenHeight;

    Adapt.device.screenWidth = getScreenWidth();
    Adapt.device.screenHeight = getScreenHeight();

    if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {
      // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.
      return;
    }

    var newScreenSize = checkScreenSize();

    if (newScreenSize !== Adapt.device.screenSize) {
      Adapt.device.screenSize = newScreenSize;

      $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);

      if (Adapt.device.orientation) {
        $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);
      }

      Adapt.trigger('device:changed', Adapt.device.screenSize);
    }

    Adapt.trigger('device:preResize device:resize device:postResize', Adapt.device.screenWidth);

  }, 100);

  function isAppleDevice() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  }

  function getAppleScreenWidth() {
    return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;
  }

  function getAppleScreenHeight() {
    return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;
  }

  function getAppleDeviceType() {
    var type = '';

    var flags = ['iphone', 'ipad', 'ipod'];

    for (var i = 0; i < flags.length; i++) {
      if (Bowser[flags[i]]) {
        type = flags[i];
        break;
      }
    }

    return type;
  }

  function pixelDensity() {
    var pixelDensity = (window.devicePixelRatio || 1);

    if (pixelDensity >= 3) {
      return 'ultra-high';
    } else if (pixelDensity >= 2) {
      return 'high';
    } else if (pixelDensity >= 1.5) {
      return 'medium';
    } else {
      return 'low';
    }
  }

  var browser = Adapt.device.browser.toLowerCase();
  // Convert 'msie' and 'internet explorer' to 'ie'.
  var browserString = browser.replace(/msie|internet explorer/, 'ie');
  browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();
  browserString += browserString.replace('.', '-').toLowerCase();

  $html.addClass(browserString + ' pixel-density-' + pixelDensity());
});

define('core/js/views/drawerItemView',[
  'core/js/adapt'
], function(Adapt) {

  var DrawerItemView = Backbone.View.extend({

    className: 'drawer__menu drawer__item',

    attributes: {
      role: 'list'
    },

    initialize: function() {
      this.listenTo(Adapt, 'drawer:empty', this.remove);
      this.render();
    },

    events: {
      'click .drawer__item-btn': 'onDrawerItemClicked'
    },

    render: function() {
      var data = this.model.toJSON();
      var template = Handlebars.templates['drawerItem'];
      $(this.el).html(template(data)).appendTo('.drawer__holder');
      return this;
    },

    onDrawerItemClicked: function(event) {
      event.preventDefault();
      var eventCallback = this.model.get('eventCallback');
      Adapt.trigger(eventCallback);
    }

  }, {
    type: 'drawerItem'
  });

  return DrawerItemView;

});

define('core/js/views/drawerView',[
  'core/js/adapt',
  'core/js/views/drawerItemView'
], function(Adapt, DrawerItemView) {

  var DrawerView = Backbone.View.extend({

    className: 'drawer u-display-none',
    disableAnimation: false,

    attributes: {
      'role': 'dialog',
      'aria-modal': 'true',
      'aria-labelledby': 'drawer-heading',
      'aria-hidden': 'true'
    },

    initialize: function() {
      this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
      this._isVisible = false;
      this.drawerDir = 'right';
      if (Adapt.config.get('_defaultDirection') === 'rtl') { // on RTL drawer on the left
        this.drawerDir = 'left';
      }
      this.setupEventListeners();
      this.render();
      this.drawerDuration = Adapt.config.get('_drawer')._duration;
      this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;
      // Setup cached selectors
      this.$wrapper = $('#wrapper');
    },

    setupEventListeners: function() {
      this.listenTo(Adapt, {
        'navigation:toggleDrawer': this.toggleDrawer,
        'drawer:triggerCustomView': this.openCustomView,
        'drawer:closeDrawer': this.onCloseDrawer,
        'remove': this.onCloseDrawer,
        'drawer:remove': this.remove
      });

      this._onKeyUp = _.bind(this.onKeyUp, this);
      this.setupEscapeKey();
    },

    setupEscapeKey: function() {
      $(window).on('keyup', this._onKeyUp);
    },

    onKeyUp: function(event) {
      if (event.which !== 27) return;
      event.preventDefault();

      this.onCloseDrawer();
    },

    events: {
      'click .drawer__back': 'onBackButtonClicked',
      'click .drawer__close': 'onCloseClicked'
    },

    render: function() {
      var template = Handlebars.templates['drawer'];
      $(this.el).html(template({ _globals: Adapt.course.get('_globals') })).prependTo('body');
      var shadowTemplate = Handlebars.templates['shadow'];
      $(shadowTemplate()).prependTo('body');
      // Set defer on post render
      _.defer(_.bind(function() {
        this.postRender();
      }, this));
      return this;
    },

    // Set tabindex for select elements
    postRender: function() {
      this.$('a, button, input, select, textarea').attr('tabindex', -1);

      this.checkIfDrawerIsAvailable();
    },

    openCustomView: function(view, hasBackButton) {
      // Set whether back button should display
      this._hasBackButton = hasBackButton;
      this._isCustomViewVisible = true;
      Adapt.trigger('drawer:empty');
      this.showDrawer();
      this.$('.drawer__holder').html(view);
    },

    checkIfDrawerIsAvailable: function() {
      if (this.collection.length === 0) {
        $('.js-nav-drawer-btn').addClass('u-display-none');
        Adapt.trigger('drawer:noItems');
        return;
      }
      $('.js-nav-drawer-btn').removeClass('u-display-none');
    },

    onBackButtonClicked: function(event) {
      event.preventDefault();
      this.showDrawer(true);
    },

    onCloseClicked: function(event) {
      event.preventDefault();
      this.hideDrawer();
    },

    onCloseDrawer: function($toElement) {
      this.hideDrawer($toElement);
    },

    toggleDrawer: function() {
      if (this._isVisible && this._isCustomViewVisible === false) {
        this.hideDrawer();
      } else {
        this.showDrawer(true);
      }
    },

    showDrawer: function(emptyDrawer) {
      this.$el.removeClass('u-display-none').removeAttr('aria-hidden');
      // Only trigger popup:opened if drawer is visible, pass popup manager drawer element
      if (!this._isVisible) {
        Adapt.a11y.popupOpened(this.$el);
        Adapt.a11y.scrollDisable('body');
        this._isVisible = true;
      }

      // Sets tab index to 0 for all tabbable elements in Drawer
      this.$('a, button, input, select, textarea').attr('tabindex', 0);

      if (emptyDrawer) {
        this.$('.drawer__back').addClass('u-display-none');
        this._isCustomViewVisible = false;
        this.emptyDrawer();
        if (this.collection.models.length === 1) {
          // This callback triggers openCustomView() and sets
          // _isCustomViewVisible to true, causing toggleDrawer()
          // to re-render the drawer on every toggle button press
          Adapt.trigger(this.collection.models[0].get('eventCallback'));
          // Set _isCustomViewVisible to false to prevent re-rendering
          // the drawer and fix the toggle functionality on toggle button press
          this._isCustomViewVisible = false;
        } else {
          this.renderItems();
          Adapt.trigger('drawer:openedItemView');
        }
      } else {
        if (this._hasBackButton && this.collection.models.length > 1) {
          this.$('.drawer__back').removeClass('u-display-none');
        } else {
          this.$('.drawer__back').addClass('u-display-none');
        }
        Adapt.trigger('drawer:openedCustomView');
      }

      // delay drawer animation until after background fadeout animation is complete
      var direction = {};
      if (this.disableAnimation) {
        $('.js-shadow').removeClass('u-display-none');
        $('.js-drawer-holder').scrollTop(0);

        direction[this.drawerDir] = 0;
        this.$el.css(direction);
        complete.call(this);
      } else {
        // eslint-disable-next-line object-property-newline
        $('.js-shadow').velocity({ opacity: 1 }, { duration: this.drawerDuration, begin: _.bind(function() {
          $('.js-shadow').removeClass('u-display-none');
          $('.js-drawer-holder').scrollTop(0);
          complete.call(this);
        }, this) });

        var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;
        var easing = (showEasingAnimation) || 'easeOutQuart';

        direction[this.drawerDir] = 0;
        this.$el.velocity(direction, this.drawerDuration, easing);
      }

      function complete() {
        this.addShadowEvent();
        Adapt.trigger('drawer:opened');

        // focus on first tabbable element in drawer
        Adapt.a11y.focusFirst(this.$el, { defer: true });
      }

    },

    emptyDrawer: function() {
      this.$('.drawer__holder').empty();
    },

    renderItems: function() {
      Adapt.trigger('drawer:empty');
      this.emptyDrawer();
      var models = this.collection.models;
      for (var i = 0, len = models.length; i < len; i++) {
        var item = models[i];
        new DrawerItemView({ model: item });
      }
    },

    hideDrawer: function($toElement) {
      var direction = {};
      // only trigger popup:closed if drawer is visible
      if (this._isVisible) {
        Adapt.a11y.popupClosed($toElement);
        this._isVisible = false;
        Adapt.a11y.scrollEnable('body');
      } else {
        return;
      }

      if (this.disableAnimation) {

        direction[this.drawerDir] = -this.$el.width();
        this.$el
          .css(direction)
          .addClass('u-display-none')
          .attr('aria-hidden', 'true');

        $('.js-shadow').addClass('u-display-none');

        Adapt.trigger('drawer:closed');

      } else {

        var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;
        var easing = (showEasingAnimation) || 'easeOutQuart';

        direction[this.drawerDir] = -this.$el.width();
        this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {
          this.$el
            .addClass('u-display-none')
            .attr('aria-hidden', 'true');

          Adapt.trigger('drawer:closed');
        }, this));

        $('.js-shadow').velocity({ opacity: 0 }, { duration: this.drawerDuration,
          complete: function() {
            $('.js-shadow').addClass('u-display-none');
          } });

      }

      this._isCustomViewVisible = false;
      this.removeShadowEvent();

    },

    addShadowEvent: function() {
      $('.js-shadow').one('click touchstart', function() {
        this.onCloseDrawer();
      }.bind(this));
    },

    removeShadowEvent: function() {
      $('.js-shadow').off('click touchstart');
    },

    remove: function() {
      Backbone.View.prototype.remove.apply(this, arguments);
      $(window).off('keyup', this._onKeyUp);

      Adapt.trigger('drawer:empty');
      this.collection.reset();
      $('.js-shadow').remove();
    }

  }, {
    childContainer: '.js-drawer-holder',
    childView: DrawerItemView
  });

  return DrawerView;

});

define('core/js/drawer',[
  'core/js/adapt',
  'core/js/views/drawerView'
], function(Adapt, DrawerView) {

  var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });
  var Drawer = {};

  Drawer.addItem = function(drawerObject, eventCallback) {
    drawerObject.eventCallback = eventCallback;
    DrawerCollection.add(drawerObject);
  };

  Drawer.triggerCustomView = function(view, hasBackButton) {
    if (hasBackButton !== false) {
      hasBackButton = true;
    }
    Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
  };

  Adapt.on({
    'adapt:start': function() {
      new DrawerView({ collection: DrawerCollection });
    },
    'app:languageChanged': function() {
      Adapt.trigger('drawer:remove');
    }
  });

  Adapt.drawer = Drawer;

});

define('core/js/views/notifyPushView',[
  'core/js/adapt'
], function (Adapt) {

  var NotifyPushView = Backbone.View.extend({

    className: function () {
      var classes = 'notify-push ';
      classes += (this.model.get('_classes') || '');
      return classes;
    },

    attributes: {
      'role': 'dialog',
      'aria-labelledby': 'notify-push-heading',
      'aria-modal': 'false'
    },

    initialize: function () {
      this.listenTo(Adapt, {
        'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
        'remove': this.remove
      });

      this.listenTo(this.model.collection, {
        'remove': this.updateIndexPosition,
        'change:_index': this.updatePushPosition
      });

      this.preRender();
      this.render();
    },

    events: {
      'click .js-notify-push-close-btn': 'closePush',
      'click .js-notify-push-inner': 'triggerEvent'
    },

    preRender: function () {
      this.hasBeenRemoved = false;
    },

    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates['notifyPush'];
      this.$el.html(template(data)).appendTo('#wrapper');

      _.defer(this.postRender.bind(this));

      return this;
    },

    postRender: function () {
      this.$el.addClass('is-active');

      _.delay(this.closePush.bind(this), this.model.get('_timeout'));

      Adapt.trigger('notify:pushShown');
    },

    closePush: function (event) {
      if (event) {
        event.preventDefault();
      }

      // Check whether this view has been removed as the delay can cause it to be fired twice
      if (this.hasBeenRemoved === false) {

        this.hasBeenRemoved = true;

        this.$el.removeClass('is-active');

        _.delay(function () {
          this.model.collection.remove(this.model);
          Adapt.trigger('notify:pushRemoved', this);
          this.remove();
        }.bind(this), 600);
      }
    },

    triggerEvent: function (event) {
      Adapt.trigger(this.model.get('_callbackEvent'));
      this.closePush();
    },

    updateIndexPosition: function () {
      if (!this.hasBeenRemoved) {
        var models = this.model.collection.models;
        for (var i = 0, len = models.length; i < len; i++) {
          var index = i;
          var model = models[i];
          if (model.get('_isActive') === true) {
            model.set('_index', index);
            this.updatePushPosition();
          }
        }
      }
    },

    updatePushPosition: function () {
      if (this.hasBeenRemoved) {
        return;
      }

      if (typeof this.model.get('_index') !== 'undefined') {
        var elementHeight = this.$el.height();
        var offset = 20;
        var navigationHeight = $('.nav').height();
        var currentIndex = this.model.get('_index');
        var flippedIndex = (currentIndex === 0) ? 1 : 0;

        if (this.model.collection.where({ _isActive: true }).length === 1) {
          flippedIndex = 0;
        }

        var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
        this.$el.css('top', positionLowerPush);
      }
    }
  });

  return NotifyPushView;

});

define('core/js/models/notifyModel',[],function() {

  var NotifyModel = Backbone.Model.extend({
    defaults: {
      _isActive: false,
      _showIcon: false,
      _timeout: 3000
    }
  });

  return NotifyModel;

});

define('core/js/collections/notifyPushCollection',[
  'core/js/adapt',
  'core/js/views/notifyPushView',
  'core/js/models/notifyModel'
], function(Adapt, NotifyPushView, NotifyModel) {

  // Build a collection to store push notifications
  var NotifyPushCollection = Backbone.Collection.extend({

    model: NotifyModel,

    initialize: function() {
      this.listenTo(this, 'add', this.onPushAdded);
      this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
    },

    onPushAdded: function(model) {
      this.checkPushCanShow(model);
    },

    checkPushCanShow: function(model) {
      if (this.canShowPush()) {
        model.set('_isActive', true);
        this.showPush(model);
      }
    },

    canShowPush: function() {
      var availablePushNotifications = this.where({ _isActive: true });
      if (availablePushNotifications.length >= 2) {
        return false;
      }
      return true;
    },

    showPush: function(model) {
      new NotifyPushView({
        model: model
      });
    },

    onRemovePush: function(view) {
      var inactivePushNotifications = this.where({ _isActive: false });
      if (inactivePushNotifications.length > 0) {
        this.checkPushCanShow(inactivePushNotifications[0]);
      }
    }

  });

  return NotifyPushCollection;

});

define('core/js/views/notifyView',[
  'core/js/adapt'
], function(Adapt) {

  var NotifyView = Backbone.View.extend({

    className: function() {
      var classes = 'notify ';
      classes += (this.model.get('_classes') || '');
      return classes;
    },

    attributes: {
      'role': 'dialog',
      'aria-labelledby': 'notify-heading',
      'aria-modal': 'true'
    },

    disableAnimation: false,
    isOpen: false,
    hasOpened: false,

    initialize: function() {
      _.bindAll(this, 'resetNotifySize');
      this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;

      this.setupEventListeners();

      this.render();
    },

    setupEventListeners: function() {
      this.listenTo(Adapt, {
        'remove page:scrollTo': this.closeNotify,
        'notify:resize': this.resetNotifySize,
        'notify:cancel': this.cancelNotify,
        'notify:close': this.closeNotify,
        'device:resize': this.resetNotifySize
      });

      this._onKeyUp = this.onKeyUp.bind(this);
      this.setupEscapeKey();
    },

    setupEscapeKey: function() {
      $(window).on('keyup', this._onKeyUp);
    },

    onKeyUp: function(event) {
      if (event.which !== 27) return;
      event.preventDefault();

      this.cancelNotify();
    },

    events: {
      'click .js-notify-btn-alert': 'onAlertButtonClicked',
      'click .js-notify-btn-prompt': 'onPromptButtonClicked',
      'click .js-notify-close-btn': 'onCloseButtonClicked',
      'click .js-notify-shadow-click': 'onShadowClicked'
    },

    render: function() {
      var data = this.model.toJSON();
      var template = Handlebars.templates.notify;

      // hide notify container
      this.$el.css('visibility', 'hidden');
      // attach popup + shadow
      this.$el.html(template(data)).prependTo('body');
      // hide popup
      this.$('.notify__popup').css('visibility', 'hidden');
      // show notify container
      this.$el.css('visibility', 'visible');

      this.showNotify();
      return this;
    },

    onAlertButtonClicked: function(event) {
      event.preventDefault();
      // tab index preservation, notify must close before subsequent callback is triggered
      this.closeNotify();
      Adapt.trigger(this.model.get('_callbackEvent'), this);
    },

    onPromptButtonClicked: function(event) {
      event.preventDefault();
      // tab index preservation, notify must close before subsequent callback is triggered
      this.closeNotify();
      Adapt.trigger($(event.currentTarget).attr('data-event'), this);
    },

    onCloseButtonClicked: function(event) {
      event.preventDefault();
      // tab index preservation, notify must close before subsequent callback is triggered
      this.cancelNotify();
    },

    onShadowClicked: function(event) {
      event.preventDefault();
      if (this.model.get('_closeOnShadowClick') === false) return;
      this.cancelNotify();
    },

    cancelNotify: function() {
      if (this.model.get('_isCancellable') === false) return;
      // tab index preservation, notify must close before subsequent callback is triggered
      this.closeNotify();
      Adapt.trigger('notify:cancelled', this);
    },

    resetNotifySize: function() {
      if (!this.hasOpened) return;

      $('.notify__popup').removeAttr('style').css({ visibility: 'visible', opacity: 1 });

      this.resizeNotify();
    },

    resizeNotify: function() {
      var windowHeight = $(window).height();
      var notifyHeight = this.$('.notify__popup').outerHeight();

      if (notifyHeight >= windowHeight) {
        this.$('.notify__popup').css({
          'height': '100%',
          'top': 0,
          'overflow-y': 'scroll',
          '-webkit-overflow-scrolling': 'touch'
        });
      } else {
        this.$('.notify__popup').css({
          'margin-top': -(notifyHeight / 2)
        });
      }
    },

    showNotify: function() {
      this.isOpen = true;
      this.addSubView();

      // Keep focus from previous action
      this.$previousActiveElement = $(document.activeElement);

      Adapt.trigger('notify:opened', this);

      this.$el.imageready(this.onLoaded.bind(this));
    },

    onLoaded: function() {
      if (this.disableAnimation) {
        this.$('.notify__shadow').css('display', 'block');
      } else {
        this.$('.notify__shadow').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, { duration: 400,
          begin: function() {
            this.$('.notify__shadow').css('display', 'block');
          }.bind(this) });
      }

      this.resizeNotify();

      if (this.disableAnimation) {
        this.$('.notify__popup').css('visibility', 'visible');
        this.onOpened();
      } else {
        this.$('.notify__popup').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, { duration: 400,
          begin: function() {
          // Make sure to make the notify visible and then set
          // focus, disabled scroll and manage tabs
            this.$('.notify__popup').css('visibility', 'visible');
            this.onOpened();
          }.bind(this) });
      }
    },

    onOpened: function() {
      this.hasOpened = true;
      // Allows popup manager to control focus
      Adapt.a11y.popupOpened(this.$('.notify__popup'));
      Adapt.a11y.scrollDisable('body');
      $('html').addClass('notify');

      // Set focus to first accessible element
      Adapt.a11y.focusFirst(this.$('.notify__popup'), { defer: false });
    },

    addSubView: function() {
      this.subView = this.model.get('_view');
      if (!this.subView) return;

      this.subView.$el.on('resize', this.resetNotifySize);

      this.$('.notify__content-inner').append(this.subView.$el);
    },

    closeNotify: function (event) {
      // Prevent from being invoked multiple times - see https://github.com/adaptlearning/adapt_framework/issues/1659
      if (!this.isOpen) return;
      this.isOpen = false;

      // If closeNotify is called before showNotify has finished then wait
      // until it's open.
      if (!this.hasOpened) {
        this.listenToOnce(Adapt, 'popup:opened', function() {
          // Wait for popup:opened to finish processing
          _.defer(this.onCloseReady.bind(this));
        });
      } else {
        this.onCloseReady();
      }
    },

    onCloseReady: function() {
      if (this.disableAnimation) {
        this.$('.notify__popup').css('visibility', 'hidden');
        this.$el.css('visibility', 'hidden');
        this.remove();
      } else {
        this.$('.notify__popup').velocity({ opacity: 0 }, { duration: 400,
          complete: function() {
            this.$('.notify__popup').css('visibility', 'hidden');
          }.bind(this) });

        this.$('.notify__shadow').velocity({ opacity: 0 }, { duration: 400,
          complete: function() {
            this.$el.css('visibility', 'hidden');
            this.remove();
          }.bind(this) });
      }

      Adapt.a11y.scrollEnable('body');
      $('html').removeClass('notify');

      // Return focus to previous active element
      Adapt.a11y.popupClosed(this.$previousActiveElement);
      // Return reference to the notify view
      Adapt.trigger('notify:closed', this);
    },

    remove: function() {
      this.removeSubView();
      $(window).off('keyup', this._onKeyUp);
      Backbone.View.prototype.remove.apply(this, arguments);
    },

    removeSubView: function() {
      if (!this.subView) return;
      this.subView.$el.off('resize', this.resetNotifySize);
      this.subView.remove();
      this.subView = null;
    }

  });

  return NotifyView;

});

define('core/js/notify',[
  'core/js/adapt',
  'core/js/collections/notifyPushCollection',
  'core/js/views/notifyView',
  'core/js/models/notifyModel'
], function(Adapt, NotifyPushCollection, NotifyView, NotifyModel) {

  var Notify = Backbone.Controller.extend({

    notifyPushes: null,

    _warnFirstOnly: true,
    _warn: true,
    _hasWarned: false,

    initialize: function() {
      this.notifyPushes = new NotifyPushCollection();
      this.listenTo(Adapt, {
        'notify:popup': this._deprecated.bind(this, 'popup'),
        'notify:alert': this._deprecated.bind(this, 'alert'),
        'notify:prompt': this._deprecated.bind(this, 'prompt'),
        'notify:push': this._deprecated.bind(this, 'push')
      });
    },

    _deprecated: function(type, notifyObject) {
      if (this._warn && (this._warnFirstOnly && !this._hasWarned)) {
        Adapt.log.warn('NOTIFY DEPRECATED: Adapt.trigger(\'notify:' + type + '\', notifyObject); is no longer supported, please use Adapt.notify.' + type + '(notifyObject);');
        this._hasWarned = true;
      }
      return this.create(notifyObject, { _type: type });
    },

    create: function(notifyObject, defaults) {
      notifyObject = _.defaults({}, notifyObject, defaults, {
        _type: 'popup',
        _isCancellable: true,
        _showCloseButton: true,
        _closeOnShadowClick: true
      });

      if (notifyObject._type === 'push') {
        this.notifyPushes.push(notifyObject);
        return;
      }

      return new NotifyView({
        model: new NotifyModel(notifyObject)
      });
    },

    /**
     * Creates a 'popup' notify
     * @param {Object} notifyObject An object containing all the settings for the popup
     * @param {string} notifyObject.title Title of the popup
     * @param {string} notifyObject.body Body of the popup
     * @param {Boolean} [notifyObject._showCloseButton=true] If set to `false` the popup will not have a close button. The learner will still be able to dismiss the popup by clicking outside of it or by pressing the Esc key. This setting is typically used mainly for popups that have a subview (where the subview contains the close button)
     * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` the learner will not be able to close the popup - use with caution!
     * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
     * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
     */
    popup: function(notifyObject) {
      return this.create(notifyObject, { _type: 'popup' });
    },

    /**
     * Creates an 'alert' notify popup
     * @param {Object} notifyObject An object containing all the settings for the alert popup
     * @param {string} notifyObject.title Title of the alert popup
     * @param {string} notifyObject.body Body of the alert popup
     * @param {string} notifyObject.confirmText Label for the popup confirm button
     * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` only the confirm button can be used to dismiss/close the popup
     * @param {Boolean} [notifyObject._showIcon=false] If set to `true` an 'alert' icon will be displayed in the popup
     * @param {string} [notifyObject._callbackEvent] Event to trigger when the confirm button is clicked
     * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
     * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
     */
    alert: function(notifyObject) {
      return this.create(notifyObject, { _type: 'alert' });
    },

    /**
     * Creates a 'prompt dialog' notify popup
     * @param {Object} notifyObject An object containing all the settings for the prompt dialog
     * @param {string} notifyObject.title Title of the prompt
     * @param {string} notifyObject.body Body of the prompt
     * @param {Object[]} notifyObject._prompts Array of objects that each define a button (and associated callback event) that you want shown in the prompt
     * @param {string} notifyObject._prompts[].promptText Label for this button
     * @param {string} notifyObject._prompts[]._callbackEvent Event to be triggered when this button is clicked
     * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` only the confirm button can be used to dismiss/close the prompt
     * @param {Boolean} [notifyObject._showIcon=true] If set to `true` a 'query' icon will be displayed in the popup
     * @param {string} [notifyObject._callbackEvent] Event to trigger when the confirm button is clicked
     * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
     * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
     */
    prompt: function(notifyObject) {
      return this.create(notifyObject, { _type: 'prompt' });
    },

    /**
     * Creates a 'push notification'
     * @param {Object} notifyObject An object containing all the settings for the push notification
     * @param {string} notifyObject.title Title of the push notification
     * @param {string} notifyObject.body Body of the push notification
     * @param {Number} [notifyObject._timeout=3000] Length of time (in milliseconds) the notification should left on-screen before automatically fading away
     * @param {string} notifyObject._callbackEvent Event to be triggered if the learner clicks on the push notification (not triggered if they use the close button)
     * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
     */
    push: function(notifyObject) {
      return this.create(notifyObject, { _type: 'push' });
    }

  });

  return (Adapt.notify = new Notify());

});

define('core/js/models/routerModel',[
  'core/js/adapt'
], function (Adapt) {

  var RouterModel = Backbone.Model.extend({

    defaults: {
      _canNavigate: true,
      _shouldNavigateFocus: true
    },

    lockedAttributes: {
      _canNavigate: false,
      _shouldNavigateFocus: false
    }

  });

  return RouterModel;

});

define('core/js/views/adaptView',[
  'core/js/adapt'
], function(Adapt) {

  var AdaptView = Backbone.View.extend({

    attributes: function() {
      return {
        'data-adapt-id': this.model.get('_id')
      };
    },

    initialize: function() {
      this.listenTo(Adapt, 'remove', this.remove);
      this.listenTo(this.model, {
        'change:_isVisible': this.toggleVisibility,
        'change:_isHidden': this.toggleHidden,
        'change:_isComplete': this.onIsCompleteChange
      });
      this.model.set({
        '_globals': Adapt.course.get('_globals'),
        '_isReady': false
      });
      this._isRemoved = false;

      if (Adapt.location._currentId === this.model.get('_id')) {
        Adapt.parentView = this;
      }

      this.preRender();
      this.render();
      this.setupOnScreenHandler();
    },

    preRender: function() {},

    postRender: function() {
      this.addChildren();
    },

    render: function() {
      Adapt.trigger(this.constructor.type + 'View:preRender', this);

      var data = this.model.toJSON();
      data.view = this;
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));

      Adapt.trigger(this.constructor.type + 'View:render', this);

      _.defer(function() {
        // don't call postRender after remove
        if (this._isRemoved) return;

        this.postRender();
        Adapt.trigger(this.constructor.type + 'View:postRender', this);
      }.bind(this));

      return this;
    },

    setupOnScreenHandler: function() {
      var onscreen = this.model.get('_onScreen');

      if (!onscreen || !onscreen._isEnabled) return;

      this.$el
        .addClass('has-animation')
        .addClass(onscreen._classes + '-before');

      this.$el.on('onscreen.adaptView', function (e, m) {

        if (!m.onscreen) return;

        var minVerticalInview = onscreen._percentInviewVertical || 33;

        if (m.percentInviewVertical < minVerticalInview) return;

        this.$el.addClass(onscreen._classes + '-after' || 'onscreen').off('onscreen.adaptView');

      }.bind(this));
    },

    addChildren: function() {
      var nthChild = 0;
      var children = this.model.getChildren();
      var models = children.models;
      this.childViews = {};
      for (var i = 0, len = models.length; i < len; i++) {
        var model = models[i];
        if (!model.get('_isAvailable')) continue;

        nthChild++;
        model.set('_nthChild', nthChild);

        var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get('_component')];
        var ChildView = ViewModelObject.view || ViewModelObject;

        if (!ChildView) {
          throw new Error('The component \'' + models[i].attributes._id + '\'' +
          ' (\'' + models[i].attributes._component + '\')' +
          ' has not been installed, and so is not available in your project.');
        }

        var $parentContainer = this.$(this.constructor.childContainer);
        var childView = new ChildView({ model: model });

        this.childViews[model.get('_id')] = childView;

        $parentContainer.append(childView.$el);
      }
    },

    findDescendantViews: function(isParentFirst) {
      var descendants = [];
      this.childViews && _.each(this.childViews, function(view) {
        if (isParentFirst) descendants.push(view);
        var children = view.findDescendantViews && view.findDescendantViews(isParentFirst);
        if (children) descendants.push.apply(descendants, children);
        if (!isParentFirst) descendants.push(view);
      });
      return descendants;
    },

    setReadyStatus: function() {
      this.model.set('_isReady', true);
    },

    setCompletionStatus: function() {
      if (this.model.get('_isVisible')) {
        this.model.set({
          '_isComplete': true,
          '_isInteractionComplete': true
        });
      }
    },

    resetCompletionStatus: function(type) {
      if (!this.model.get('_canReset')) return;

      var descendantComponents = this.model.findDescendantModels('components');
      if (descendantComponents.length === 0) {
        this.model.reset(type);
      } else {
        _.each(descendantComponents, function(model) {
          model.reset(type);
        });
      }
    },

    preRemove: function() {},

    remove: function() {

      this.preRemove();
      this._isRemoved = true;

      Adapt.wait.for(function(end) {

        this.$el.off('onscreen.adaptView');
        this.model.setOnChildren('_isReady', false);
        this.model.set('_isReady', false);
        Backbone.View.prototype.remove.call(this);

        end();
      }.bind(this));

      return this;
    },

    setVisibility: function() {
      var visible = 'u-visibility-hidden';
      if (this.model.get('_isVisible')) {
        visible = '';
      }
      return visible;
    },

    toggleVisibility: function() {
      if (this.model.get('_isVisible')) {
        return this.$el.removeClass('u-visibility-hidden');
      }
      this.$el.addClass('u-visibility-hidden');
    },

    setHidden: function() {
      var hidden = '';
      if (this.model.get('_isHidden')) {
        hidden = 'u-display-none';
      }
      return hidden;
    },

    toggleHidden: function() {
      if (!this.model.get('_isHidden')) {
        return this.$el.removeClass('u-display-none');
      }
      this.$el.addClass('u-display-none');
    },

    onIsCompleteChange: function(model, isComplete) {
      this.$el.toggleClass('is-complete', isComplete);
    },

    getChildViews: function() {
      return this.childViews;
    }

  }, {
    className: ''
  });

  return AdaptView;

});

define('core/js/views/blockView',[
  'core/js/views/adaptView'
], function(AdaptView) {

  var BlockView = AdaptView.extend({

    className: function() {
      return [
        'block',
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        this.setHidden(),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    }

  }, {
    childContainer: '.component__container',
    type: 'block',
    template: 'block'
  });

  return BlockView;

});

define('core/js/views/articleView',[
  'core/js/views/adaptView',
  'core/js/views/blockView'
], function(AdaptView, BlockView) {

  var ArticleView = AdaptView.extend({

    className: function() {
      return [
        'article',
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        this.setHidden(),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    }

  }, {
    childContainer: '.block__container',
    childView: BlockView,
    type: 'article',
    template: 'article'
  });

  return ArticleView;

});

define('core/js/views/pageView',[
  'core/js/adapt',
  'core/js/views/adaptView',
  'core/js/views/articleView'
], function(Adapt, AdaptView, ArticleView) {

  var PageView = AdaptView.extend({

    attributes: function() {
      return AdaptView.resultExtend('attributes', {
        'aria-labelledby': this.model.get('_id') + '-heading',
        'role': 'main'
      }, this);
    },

    className: function() {
      return [
        'page',
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    },

    preRender: function() {
      $.inview.lock('pageView');
      this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
      this.$el.css('opacity', 0);
      this.listenTo(this.model, 'change:_isReady', this.isReady);
    },

    isReady: function() {
      if (!this.model.get('_isReady')) return;

      var performIsReady = function() {
        $('.js-loading').hide();
        $(window).scrollTop(0);
        Adapt.trigger('pageView:ready', this);
        $.inview.unlock('pageView');
        var styleOptions = { opacity: 1 };
        if (this.disableAnimation) {
          this.$el.css(styleOptions);
          $.inview();
        } else {
          this.$el.velocity(styleOptions, {
            duration: 'fast',
            complete: function() {
              $.inview();
            }
          });
        }
        $(window).scroll();
      }.bind(this);

      Adapt.wait.queue(function() {
        _.defer(performIsReady);
      });
    },

    remove: function() {
      if (this.$pageLabel) {
        this.$pageLabel.remove();
      }
      AdaptView.prototype.remove.call(this);
    }

  }, {
    childContainer: '.article__container',
    childView: ArticleView,
    type: 'page',
    template: 'page'
  });

  return PageView;

});

define('core/js/router',[
  'core/js/adapt',
  'core/js/models/routerModel',
  'core/js/views/pageView',
  'core/js/startController'
], function(Adapt, RouterModel, PageView) {

  Adapt.router = new RouterModel(null, { reset: true });

  var Router = Backbone.Router.extend({

    // Flag to indicate if the router has tried to redirect to the current location.
    _isCircularNavigationInProgress: false,

    initialize: function() {
      this.showLoading();

      // Store #wrapper element and html to cache for later use.
      this.$wrapper = $('#wrapper');
      this.$html = $('html');

      Adapt.once('app:dataReady', function() {
        document.title = Adapt.course.get('title');
      });

      this.listenTo(Adapt, {
        'navigation:backButton': this.navigateToPreviousRoute,
        'navigation:homeButton': this.navigateToHomeRoute,
        'navigation:skipNavigation': this.skipNavigation,
        'navigation:parentButton': this.navigateToParent,
        'router:navigateTo': this.navigateToArguments
      });
    },

    routes: {
      '': 'handleRoute',
      'id/:id': 'handleRoute',
      ':pluginName(/*location)(/*action)': 'handleRoute'
    },

    pruneArguments: function(args) {
      var prunedArgs = _.toArray(args);

      if (prunedArgs.length !== 0) {
        // Remove any null arguments.
        prunedArgs = _.without(args, null);
      }

      return prunedArgs;
    },

    handleRoute: function() {
      var args = this.pruneArguments(arguments);

      if (Adapt.router.get('_canNavigate')) {
        // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.
        this._isCircularNavigationInProgress = false;
      }

      // Check if the current page is in the process of navigating to itself.
      // It will redirect to itself if the URL was changed and _canNavigate is false.
      if (this._isCircularNavigationInProgress === false) {
        // Trigger an event pre 'router:location' to allow extensions to stop routing.
        Adapt.trigger('router:navigate', args);
      }

      // Re-check as _canNavigate can be set to false on 'router:navigate' event.
      if (Adapt.router.get('_canNavigate')) {
        // Disable navigation whilst rendering.
        Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });

        switch (args.length) {
          case 1:
            // If only one parameter assume it's the ID.
            return this.handleId.apply(this, args);
          case 2:
            // If there are two parameters assume it's a plugin.
            return this.handlePluginRouter.apply(this, args);
          default:
            // Route to course home page.
            return this.handleCourse();
        }
      }

      if (this._isCircularNavigationInProgress) {
        // Navigation correction finished.
        // Router has successfully re-navigated to the current _id as the URL was changed
        // while _canNavigate: false
        this._isCircularNavigationInProgress = false;
        return;
      }

      // Cancel navigation to stay at the current location.
      this._isCircularNavigationInProgress = true;
      Adapt.trigger('router:navigationCancelled', args);

      // Reset URL to the current one.
      this.navigateToCurrentRoute(true);
    },

    handlePluginRouter: function(pluginName, location, action) {
      var pluginLocation = pluginName;

      if (location) {
        pluginLocation = pluginLocation + '-' + location;

        if (action) {
          pluginLocation = pluginLocation + '-' + action;
        }
      }

      this.updateLocation(pluginLocation, null, null, function() {
        Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
        Adapt.trigger('router:plugin', pluginName, location, action);

        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
      });
    },

    handleCourse: function() {
      if (Adapt.course.has('_start')) {
        // Do not allow access to the menu when the start controller is enabled.
        var startController = Adapt.course.get('_start');

        if (startController._isEnabled === true && startController._isMenuDisabled === true) {
          return;
        }
      }

      this.showLoading();

      this.removeViews(_.bind(function() {
        Adapt.course.set('_isReady', false);

        this.setContentObjectToVisited(Adapt.course);

        this.updateLocation('course', null, null, _.bind(function() {
          Adapt.once('menuView:ready', function() {
            // Allow navigation.
            Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
            this.handleNavigationFocus();
          }.bind(this));

          Adapt.trigger('router:menu', Adapt.course);
        }, this));
      }, this));
    },

    handleId: function(id) {
      var currentModel = Adapt.findById(id);
      var type = '';

      if (!currentModel) {
        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
        return;
      }

      type = currentModel.get('_type');

      switch (type) {
        case 'page':
        case 'menu':
          if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {
            Adapt.log.warn('Unable to navigate to locked id: ' + id);
            Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
            if (Adapt.location._previousId === undefined) {
              return this.navigate('#/', { trigger: true, replace: true });
            } else {
              return Backbone.history.history.back();
            }
          } else {
            this.showLoading();
            this.removeViews(_.bind(function() {
              var location;
              this.setContentObjectToVisited(currentModel);

              if (type === 'page') {
                location = 'page-' + id;
                this.updateLocation(location, 'page', id, _.bind(function() {
                  Adapt.once('pageView:ready', function() {
                    // Allow navigation.
                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                    this.handleNavigationFocus();
                  }.bind(this));
                  Adapt.trigger('router:page', currentModel);
                  this.$wrapper.append(new PageView({ model: currentModel }).$el);
                }, this));
              } else {
                location = 'menu-' + id;
                this.updateLocation(location, 'menu', id, _.bind(function() {
                  Adapt.once('menuView:ready', function() {
                    // Allow navigation.
                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                    this.handleNavigationFocus();
                  }.bind(this));
                  Adapt.trigger('router:menu', currentModel);
                }, this));
              }
            }, this));
          }
          break;
        default:
          // Allow navigation.
          Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
          Adapt.navigateToElement('.' + id, { replace: true });
      }
    },

    removeViews: function(onComplete) {
      Adapt.remove();

      Adapt.wait.queue(onComplete);
    },

    showLoading: function() {
      $('.js-loading').show();
    },

    navigateToArguments: function(args) {
      args = this.pruneArguments(args);

      var options = { trigger: false, replace: false };

      switch (args.length) {
        case 0:
          this.navigate('#/', options);
          break;
        case 1:
          if (Adapt.findById(args[0])) {
            this.navigate('#/id/' + args[0], options);
          } else {
            this.navigate('#/' + args[0], options);
          }
          break;
        case 2:
        case 3:
          this.navigate('#/' + args.join('/'), options);
          break;
        default:
          Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +
            'window.location.href instead of Adapt.trigger("router:navigateTo")');
          this.handleRoute.apply(this, args);
      }
    },

    skipNavigation: function() {
      Adapt.a11y.focusFirst('.' + Adapt.location._contentType);
    },

    navigateToPreviousRoute: function(force) {
      // Sometimes a plugin might want to stop the default navigation.
      // Check whether default navigation has changed.
      if (Adapt.router.get('_canNavigate') || force) {
        if (!Adapt.location._currentId) {
          return Backbone.history.history.back();
        }
        if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {
          return this.navigateToParent();
        }
        if (Adapt.location._previousContentType === 'page') {
          return Backbone.history.history.back();
        }
        if (Adapt.location._currentLocation === 'course') {
          return;
        }
        this.navigateToParent();
      }
    },

    navigateToHomeRoute: function(force) {
      if (Adapt.router.get('_canNavigate') || force) {
        this.navigate('#/', { trigger: true });
      }
    },

    navigateToCurrentRoute: function(force) {
      if (Adapt.router.get('_canNavigate') || force) {
        if (!Adapt.location._currentId) {
          return;
        }
        var currentId = Adapt.location._currentId;
        var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;
        this.navigate(route, { trigger: true, replace: true });
      }
    },

    navigateToParent: function(force) {
      if (Adapt.router.get('_canNavigate') || force) {
        var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');
        var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;
        this.navigate(route, { trigger: true });
      }
    },

    setContentObjectToVisited: function(model) {
      model.set('_isVisited', true);
    },

    updateLocation: function(currentLocation, type, id, onComplete) {
      // Handles updating the location.
      Adapt.location._previousId = Adapt.location._currentId;
      Adapt.location._previousContentType = Adapt.location._contentType;

      if (currentLocation === 'course') {
        Adapt.location._currentId = Adapt.course.get('_id');
        Adapt.location._contentType = 'menu';
        Adapt.location._lastVisitedMenu = currentLocation;
      } else if (!type) {
        Adapt.location._currentId = null;
        Adapt.location._contentType = null;
      } else if (_.isString(id)) {
        Adapt.location._currentId = id;
        Adapt.location._contentType = type;

        if (type === 'menu') {
          Adapt.location._lastVisitedType = 'menu';
          Adapt.location._lastVisitedMenu = id;
        } else if (type === 'page') {
          Adapt.location._lastVisitedType = 'page';
          Adapt.location._lastVisitedPage = id;
        }
      }

      Adapt.location._currentLocation = currentLocation;

      var locationModel = Adapt.findById(id) || Adapt.course;
      var htmlClasses = (locationModel && locationModel.get('_htmlClasses')) || '';

      var classes = (Adapt.location._currentId) ? 'location-' +
        Adapt.location._contentType +
        ' location-id-' +
        Adapt.location._currentId
        : 'location-' + Adapt.location._currentLocation;

      var previousClasses = Adapt.location._previousClasses;
      if (previousClasses) {
        this.$html.removeClass(previousClasses);
      }

      Adapt.location._previousClasses = classes + ' ' + htmlClasses;

      this.$html
        .addClass(classes)
        .addClass(htmlClasses)
        .attr('data-location', Adapt.location._currentLocation);

      this.$wrapper
        .removeClass()
        .addClass(classes)
        .attr('data-location', Adapt.location._currentLocation);

      this.setDocumentTitle();

      // Trigger event when location changes.
      Adapt.trigger('router:location', Adapt.location);

      Adapt.wait.queue(onComplete);
    },

    setDocumentTitle: function() {
      if (!Adapt.location._currentId) return;

      var currentModel = Adapt.findById(Adapt.location._currentId);
      var pageTitle = '';

      if (currentModel && currentModel.get('_type') !== 'course') {
        var currentTitle = currentModel.get('title');

        if (currentTitle) {
          pageTitle = ' | ' + currentTitle;
        }
      }

      var courseTitle = Adapt.course.get('title');
      var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();

      Adapt.once('pageView:ready menuView:ready', function() {
        document.title = documentTitle;
      });
    },

    handleNavigationFocus: function() {
      if (!Adapt.router.get('_shouldNavigateFocus')) return;
      // Body will be forced to accept focus to start the
      // screen reader reading the page.
      Adapt.a11y.focus('body');
    }
  });

  return new Router({ model: new Backbone.Model() });

});

define('core/js/helpers',[
  'handlebars',
  'core/js/adapt'
], function(Handlebars, Adapt) {

  var defaultAriaLevels = {
    '_menu': 1,
    '_menuItem': 2,
    '_page': 1,
    '_article': 2,
    '_block': 3,
    '_component': 4,
    '_componentItem': 5,
    '_notify': 1
  };

  var helpers = {

    lowercase: function(text) {
      return text.toLowerCase();
    },

    capitalise: function(text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    },

    inc: function(index) {
      return index + 1;
    },

    dec: function(index) {
      return index - 1;
    },

    odd: function (index) {
      return (index + 1) % 2 === 0 ? 'even' : 'odd';
    },

    equals: function(value, text, block) {
      return helpers.compare.call(this, value, '==', text, block);
    },

    compare: function(value, operator, text, block) {
      // Comparison operators
      switch (operator) {
        case '===':
          if (value === text) return block.fn(this);
          break;
        case '=': case '==':
          // eslint-disable-next-line eqeqeq
          if (value == text) return block.fn(this);
          break;
        case '>=':
          if (value >= text) return block.fn(this);
          break;
        case '<=':
          if (value <= text) return block.fn(this);
          break;
        case '>':
          if (value > text) return block.fn(this);
          break;
        case '<':
          if (value < text) return block.fn(this);
          break;
      }
      return block.inverse(this);
    },

    math: function(lvalue, operator, rvalue, options) {
      // Mathematical operators
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);
      switch (operator) {
        case '+': return lvalue + rvalue;
        case '-': return lvalue - rvalue;
        case '*': return lvalue * rvalue;
        case '/': return lvalue / rvalue;
        case '%': return lvalue % rvalue;
      }
    },

    /**
     * Equivalent to:
     *  if (conditionA || conditionB)
     * @example
     * {{#any displayTitle body instruction}}
     * <div class='component__header {{_component}}__header'></div>
     * {{/any}}
     */
    any: function() {
      var args = Array.prototype.slice.call(arguments, 0, -1);
      var block = Array.prototype.slice.call(arguments, -1)[0];

      return _.any(args) ? block.fn(this) : block.inverse(this);
    },

    /**
     * Equivalent to:
     *  if (conditionA && conditionB)
     * @example
     * {{#all displayTitle body instruction}}
     * <div class='component__header {{_component}}__header'></div>
     * {{/all}}
     */
    all: function() {
      var args = Array.prototype.slice.call(arguments, 0, -1);
      var block = Array.prototype.slice.call(arguments, -1)[0];

      return _.all(args) ? block.fn(this) : block.inverse(this);
    },

    /**
     * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON
     */
    compile: function(template, context) {
      if (!template) {
        return '';
      }
      if (template instanceof Object) template = template.toString();
      var data = this;
      if (context) {
        // choose between a passed argument context or the default handlebars helper context
        data = (!context.data || !context.data.root ? context : context.data.root);
      }
      return Handlebars.compile(template)(data);
    },

    /**
     * Allow JSON to be a template and accessible text
     */
    compile_a11y_text: function(template, context) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return helpers.compile.call(this, template, context);
    },

    /**
     * Allow JSON to be a template and normalized text
     */
    compile_a11y_normalize: function(template, context) {
      if (!template) {
        return '';
      }
      if (template instanceof Object) template = template.toString();
      return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));
    },

    /**
     * Remove all html tags except styling tags
     */
    compile_a11y_remove_breaks: function(template, context) {
      if (!template) {
        return '';
      }
      return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));
    },

    /**
     * makes the _globals object in course.json available to a template
     */
    import_globals: function(context) {
      if (context.data.root._globals) {
        return '';
      }
      context.data.root._globals = Adapt.course.get('_globals');
      return '';
    },

    /**
     * makes the Adapt module data available to a template
     */
    import_adapt: function(context) {

      if (context.data.root.Adapt) {
        return;
      }
      var adapt = context.data.root.Adapt = {};

      var i, l, name;

      var directImport = ['config', 'course'];
      for (i = 0, l = directImport.length; i < l; i++) {
        name = directImport[i];
        // convert the model to a json object and add to the current context
        adapt[name] = Adapt[name].toJSON();
      }

      var indexedImport = ['contentObjects', 'articles', 'blocks', 'components'];
      for (i = 0, l = indexedImport.length; i < l; i++) {
        name = indexedImport[i];
        // convert the collection of models to an array of json objects
        var importArray = Adapt[name].toJSON();
        // convert the array of json models to an object indexed by id
        var importIndex = {};
        for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
          var item = importArray[i1];
          importIndex[item._id] = item;
        }
        // add the indexed object to the current context
        adapt[name] = importIndex;
      }

      return '';

    },

    /**
     * Allow components to fetch their component description.
     *
     * Creates an aria label using the `a11y_aria_label` helper containing
     * the component description specified in the
     * `_globals._component[componentName].ariaRegion`. This value is defined
     * in the `properties.schema:globals.ariaRegion`.
     *
     * @param {string} [override]
     * @returns {string}
     */
    component_description: function(override, context) {
      if (!this._isA11yComponentDescriptionEnabled) {
        return;
      }
      var isNotDefined = (!this._globals._components || !this._globals._components['_' + this._component]);
      if (isNotDefined) {
        return;
      }
      var hasOverride = (arguments.length > 1);
      var description;
      if (hasOverride) {
        description = override;
        description = helpers.compile(description, context);
      } else {
        description = this._globals._components['_' + this._component].ariaRegion;
        description = helpers.compile(description, override);
      }
      if (!description) {
        return;
      }
      return new Handlebars.SafeString('<div class="aria-label">' + description + '</div>');
    },

    a11y_text: function(text) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },

    /**
     * Handlebars helper for `Adapt.a11y.normalize(htmls)`.
     *
     * @param {string} htmls Any htmls.
     * @returns {string}
     */
    a11y_normalize: function(htmls) {
      return Adapt.a11y.normalize.apply(Adapt.a11y, arguments);
    },

    /**
     * Handlebars helper for `Adapt.a11y.removeBreaks(htmls)`.
     *
     * @param {string} htmls Any htmls.
     * @returns {string}
     */
    a11y_remove_breaks: function(htmls) {
      return Adapt.a11y.removeBreaks.apply(Adapt.a11y, arguments);
    },

    /**
     * Creates a div styled with tiny, transparent text.
     * It it absolutely positioned.
     * The text is not visibly readable but is read by screen readers.
     *
     * @param {string} htmls
     * @returns {string}
     */
    a11y_aria_label: function(htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label">' + values.join(' ') + '</div>');
    },

    /**
     * Creates a div styled with tiny, transparent text.
     * It it relatively positioned.
     * The text is not visibly readable but is read by screen readers.
     *
     * @param {string} htmls Aria label texts.
     * @returns {string}
     */
    a11y_aria_label_relative: function(htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label relative">' + values.join(' ') + '</div>');
    },

    /**
     * Creates a div styled with tiny, transparent text and `role"=img"`.
     * It is used for representing an image to a screen reader user in an
     * order which cannot be represented in the DOM in a way that achieves the
     * styling objectives.
     * It it absolutely positioned.
     * The text is not visibly readable but is read by screen readers.
     *
     * @param {string} texts Aria label texts.
     * @returns {string}
     */
    a11y_aria_image: function(texts) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="' + values.join(' ') + '"></div>');
    },

    /**
     * Returns an `a` tag which when receiving focus causes the focus to wrap
     * to the top of the readable document.
     *
     * @returns {string}
     */
    a11y_wrap_focus: function() {
      var cfg = Adapt.config.get('_accessibility');
      if (cfg._isPopupWrapFocusEnabled === false) return '';
      return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
    },

    /**
     * Creates the attributes for a subject heading text. `role="heading"` and
     * `aria-level="#"`. It will use the `_ariaLevel` attribute from the current
     * context if specified, a number if given as the `levelOrType` parameter,
     * or a name from the configured aria levels hash.
     *
     * @param {number|string} levelOrType
     * @returns {string}
     */
    a11y_attrs_heading: function(levelOrType) {
      // get the global configuration from config.json
      var cfg = Adapt.config.get('_accessibility');
      // default level to use if nothing overrides it
      var level = 1;

      // first check to see if the Handlebars context has an override
      if (this._ariaLevel) {
        levelOrType = this._ariaLevel;
      }

      if (isNaN(levelOrType) === false) {
        // if a number is passed just use this
        level = levelOrType;
      } else if (_.isString(levelOrType)) {
        // if a string is passed check if it is defined in global configuration
        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;
        if (cfg._ariaLevels && cfg._ariaLevels['_' + levelOrType] !== undefined) {
          level = cfg._ariaLevels['_' + levelOrType];
        }
      }

      return new Handlebars.SafeString(' role="heading" aria-level="' + level + '" ');
    },

    a11y_attrs_tabbable: function() {
      Adapt.a11y.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
      return new Handlebars.SafeString(' role="region" tabindex="0" ');
    },

    /**
     * Produce display text with alternative screen reader version.
     * @param {string} visible Text that will be displayed on screen
     * @param {string} alternatives Text that will be read by the screen reader (instead of what's displayed on screen)
     * @example {{a11y_alt_text '$5bn' 'five billion dollars'}} or {{a11y_alt_text 'Here are some bits to read' 'There are' _items.length 'items to read'}}
     */
    a11y_alt_text: function(visible, alternatives) {
      var values = Array.prototype.slice.call(arguments, 1, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<span aria-hidden="true">' + visible + '</span><span class="aria-label">' + values.join(' ') + '</span>');
    }

  };

  // Compatibility references
  _.extend(helpers, {

    if_value_equals: function() {
      Adapt.a11y.log.deprecated('if_value_equals, use equals instead.');
      return helpers.equals.apply(this, arguments);
    },

    numbers: function() {
      Adapt.a11y.log.deprecated('numbers, use inc instead.');
      return helpers.inc.apply(this, arguments);
    },

    lowerCase: function() {
      Adapt.a11y.log.deprecated('lowerCase, use lowercase instead.');
      return helpers.lowercase.apply(this, arguments);
    }

  });

  for (var name in helpers) {
    if (!helpers.hasOwnProperty(name)) continue;
    Handlebars.registerHelper(name, helpers[name]);
  }

  return helpers;

});

define('core/js/scrolling',[
  'core/js/adapt'
], function(Adapt) {

  var Scrolling = Backbone.Controller.extend({

    $html: null,
    $app: null,
    isLegacyScrolling: true,

    initialize: function() {
      this._checkApp();
      Adapt.once('configModel:dataLoaded', this._loadConfig.bind(this));
    },

    _checkApp: function() {
      this.$html = $('html');
      this.$app = $('#app');
      if (this.$app.length) return;
      this.$app = $('<div id="app">');
      $('body').append(this.$app);
      this.$app.append($('#wrapper'));
      Adapt.log.warn('UPDATE - Your html file needs to have #app adding. See https://github.com/adaptlearning/adapt_framework/issues/2168');
    },

    _loadConfig: function() {
      var config = Adapt.config.get('_scrollingContainer');
      if (!config || !config._isEnabled) return;
      var limitTo = config._limitToSelector;
      var isIncluded = !limitTo || (this.$html.is(limitTo) || this.$html.hasClass(limitTo));
      if (!isIncluded) return;
      this.isLegacyScrolling = false;
      this._addStyling();
      this._fixJQuery();
      this._fixScrollTo();
      this._fixBrowser();
    },

    _addStyling: function() {
      this.$html.addClass('adapt-scrolling');
    },

    _fixJQuery: function() {
      var selectorScrollTop = $.fn.scrollTop;
      var $app = Adapt.scrolling.$app;
      $.fn.scrollTop = function() {
        if (this[0] === window || this[0] === document.body) {
          return selectorScrollTop.apply($app, arguments);
        }
        return selectorScrollTop.apply(this, arguments);
      };
      var selectorOffset = $.fn.offset;
      $.fn.offset = function(coordinates) {
        if (coordinates) {
          return selectorOffset.apply(this, arguments);
        }
        var $app = Adapt.scrolling.$app;
        var $element = this;
        var elementOffset = selectorOffset.call($element);
        var isCorrectedContainer = $element.parents().add($element).filter('html,body,#app').length;
        if (!isCorrectedContainer) {
          // Do not adjust the offset measurement as not in $app container and isn't html or body
          return elementOffset;
        }
        // Adjust measurement by scrolling and offset of $app container
        var scrollTop = parseInt($app.scrollTop());
        var scrollLeft = parseInt($app.scrollLeft());
        var appOffset = selectorOffset.call($app);
        elementOffset.top += (scrollTop - appOffset.top);
        elementOffset.left += (scrollLeft - appOffset.left);
        return elementOffset;
      };
    },

    _fixScrollTo: function() {
      var selectorScrollTo = $.fn.scrollTo;
      var scrollTo = $.scrollTo;
      var $app = Adapt.scrolling.$app;
      $.fn.scrollTo = function(target, duration, settings) {
        if (this[0] === window || this[0] === document.body) {
          return selectorScrollTo.apply($app, arguments);
        }
        return selectorScrollTo.apply(this, arguments);
      };
      $.scrollTo = function(target, duration, settings) {
        return selectorScrollTo.apply($app, arguments);
      };
      _.extend($.scrollTo, scrollTo);
    },

    _fixBrowser: function() {
      var app = Adapt.scrolling.$app[0];
      window.scrollTo = function(x, y) {
        app.scrollTop = y || 0;
        app.scrollLeft = x || 0;
      };
      var $window = $(window);
      this.$app.on('scroll', function() {
        $window.scroll();
      });
    }

  });

  Adapt.scrolling = new Scrolling();

  Adapt.scrollTo = function(selector, settings) {
    if (!settings) {
      settings = {};
    }
    // Get the current location - this is set in the router
    var location = (Adapt.location._contentType) ?
      Adapt.location._contentType : Adapt.location._currentLocation;
    // Trigger initial scrollTo event
    Adapt.trigger(location + ':scrollTo', selector);
    // Setup duration variable passed upon argumentsß
    var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
    if (disableScrollToAnimation) {
      settings.duration = 0;
    } else if (!settings.duration) {
      settings.duration = $.scrollTo.defaults.duration;
    }

    var offsetTop = 0;
    if (Adapt.scrolling.isLegacyScrolling) {
      offsetTop = -$('.nav').outerHeight();
      // prevent scroll issue when component description aria-label coincident with top of component
      if ($(selector).hasClass('component')) {
        offsetTop -= $(selector).find('.aria-label').height() || 0;
      }
    }

    if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };
    if (settings.offset.top === undefined) settings.offset.top = offsetTop;
    if (settings.offset.left === undefined) settings.offset.left = 0;

    if (settings.offset.left === 0) settings.axis = 'y';

    if (Adapt.get('_canScroll') !== false) {
      // Trigger scrollTo plugin
      $.scrollTo(selector, settings);
    }

    // Trigger an event after animation
    // 300 milliseconds added to make sure queue has finished
    _.delay(function() {
      Adapt.a11y.focusNext(selector);
      Adapt.trigger(location + ':scrolledTo', selector);
    }, settings.duration + 300);
  };

});

define('core/js/views/headingView',[
  'core/js/adapt'
], function(Adapt) {

  var HeadingView = Backbone.View.extend({

    initialize: function() {
      this.listenTo(Adapt, 'remove', this.remove);
      this.listenTo(this.model, 'change:_isComplete', this.render);
      this.render();
    },

    render: function() {
      var template = Handlebars.templates[this.constructor.template];
      var data = this.model.toJSON();
      var customHeadingType = this.$el.attr('data-a11y-heading-type');
      if (customHeadingType) data._type = customHeadingType;
      this.$el.html(template(data));
      this.checkCompletion();
    },

    checkCompletion: function() {
      var isComplete = this.model.get('_isComplete');
      this.$el
        .toggleClass('is-complete', isComplete)
        .toggleClass('is-incomplete', !isComplete);
    }

  }, {
    template: 'heading'
  });

  return HeadingView;

});

define('core/js/headings',[
  './adapt',
  './views/headingView'
], function(Adapt, HeadingView) {

  var Headings = Backbone.Controller.extend({

    initialize: function() {
      var types = [ 'menu', 'menuItem', 'page', 'article', 'block', 'component' ];
      var eventNames = types.concat(['']).join('View:render ');
      this.listenTo(Adapt, eventNames, this.onViewRender);
    },

    onViewRender: function(view) {
      var $headingSeats = view.$('.js-heading');
      $headingSeats.each(function(index, el) {
        new HeadingView({
          el: el,
          model: view.model
        });
      });
    }

  });

  return new Headings();

});

define('core/js/views/navigationView',[
  'core/js/adapt'
], function(Adapt) {

  var NavigationView = Backbone.View.extend({

    className: 'nav',

    initialize: function() {
      this.listenToOnce(Adapt, {
        'courseModel:dataLoading': this.remove
      });
      this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
      this.template = 'nav';
      this.preRender();
    },

    events: {
      'click [data-event]': 'triggerEvent'
    },

    attributes: {
      'role': 'navigation'
    },

    preRender: function() {
      Adapt.trigger('navigationView:preRender', this);
      this.render();
    },

    render: function() {
      var template = Handlebars.templates[this.template];
      this.$el.html(template(
        {
          _globals: Adapt.course.get('_globals'),
          _accessibility: Adapt.config.get('_accessibility')
        }
      )).insertBefore('#app');

      _.defer(_.bind(function() {
        Adapt.trigger('navigationView:postRender', this);
      }, this));

      return this;
    },

    triggerEvent: function(event) {
      event.preventDefault();
      var currentEvent = $(event.currentTarget).attr('data-event');
      Adapt.trigger('navigation:' + currentEvent);
    },

    hideNavigationButton: function(model) {
      if (model.get('_type') === 'course') {
        $('.nav__back-btn, .nav__home-btn').addClass('u-display-none');
      } else {
        this.showNavigationButton();
      }
    },

    showNavigationButton: function() {
      $('.nav__back-btn, .nav__home-btn').removeClass('u-display-none');
    }

  });

  return NavigationView;

});

define('core/js/navigation',[
  'core/js/adapt',
  'core/js/views/navigationView'
], function(Adapt, NavigationView) {

  var NavigationController = Backbone.Controller.extend({

    initialize: function() {
      this.listenTo(Adapt, 'adapt:preInitialize', this.addNavigationBar);
    },

    addNavigationBar: function() {
      var adaptConfig = Adapt.course.get('_navigation');

      if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {
        Adapt.trigger('navigation:initialize');
        return;
      }

      Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation
    }

  });

  return new NavigationController();

});

define('core/js/views/componentView',[
  'core/js/adapt',
  'core/js/views/adaptView'
], function(Adapt, AdaptView) {

  var ComponentView = AdaptView.extend({

    attributes: function() {
      if (!this.model.get('_isA11yRegionEnabled')) {
        return AdaptView.resultExtend('attributes', {}, this);
      }
      return AdaptView.resultExtend('attributes', {
        'aria-labelledby': this.model.get('_id') + '-heading',
        'role': 'region'
      }, this);
    },

    className: function() {
      return [
        'component',
        this.model.get('_component').toLowerCase(),
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        this.setHidden(),
        'is-' + this.model.get('_layout'),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    },

    renderState: function() {
      Adapt.log.warn('REMOVED - renderState is removed and moved to item title');
    },

    /**
     * Allows components that want to use inview for completion to set that up
     * @param {string} [inviewElementSelector] Allows to you to specify (via a selector) which DOM element to use for inview.
     * Defaults to `'.component__inner'` if not supplied.
     * @param {function} [callback] Allows you to specify what function is called when the component has been viewed, should
     * you want to perform additional checks before setting the component to completed - see adapt-contrib-assessmentResults
     * for an example. Defaults to `view.setCompletionStatus` if not specified.
     */
    setupInviewCompletion: function(inviewElementSelector, callback) {
      this.$inviewElement = this.$(inviewElementSelector || '.component__inner');
      this.inviewCallback = (callback || this.setCompletionStatus);

      this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
    },

    removeInviewListener: function() {
      if (!this.$inviewElement) return;
      this.$inviewElement.off('inview.componentView');
      this.$inviewElement = null;
    },

    onInview: function(event, visible, visiblePartX, visiblePartY) {
      if (!visible) return;

      switch (visiblePartY) {
        case 'top':
          this.hasSeenTop = true;
          break;
        case 'bottom':
          this.hasSeenBottom = true;
          break;
        case 'both':
          this.hasSeenTop = this.hasSeenBottom = true;
      }

      if (!this.hasSeenTop || !this.hasSeenBottom) return;

      this.inviewCallback();

      if (this.model.get('_isComplete')) {
        this.removeInviewListener();
      }
    },

    postRender: function() {},

    remove: function() {
      this.removeInviewListener();

      AdaptView.prototype.remove.call(this);
    }

  }, {
    type: 'component'
  });

  return ComponentView;

});

define('components/adapt-contrib-graphic/js/adapt-contrib-graphic',[
  'core/js/adapt',
  'core/js/views/componentView',
  'core/js/models/componentModel'
], function(Adapt, ComponentView, ComponentModel) {

  var GraphicView = ComponentView.extend({

    preRender: function() {
      this.listenTo(Adapt, 'device:changed', this.resizeImage);

      this.checkIfResetOnRevisit();
    },

    postRender: function() {
      this.resizeImage(Adapt.device.screenSize, true);
    },

    checkIfResetOnRevisit: function() {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },

    resizeImage: function(width, setupInView) {
      var imageWidth = width === 'medium' ? 'small' : width;
      var imageSrc = (this.model.get('_graphic')) ? this.model.get('_graphic')[imageWidth] : '';
      this.$('.js-graphic-set-image-src').attr('src', imageSrc);

      this.$('.graphic__widget').imageready(function() {
        this.setReadyStatus();

        if (setupInView) {
          this.setupInviewCompletion('.graphic__widget');
        }
      }.bind(this));
    }
  });

  return Adapt.register('graphic', {
    model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later
    view: GraphicView
  });

});

define('components/adapt-contrib-media/js/adapt-contrib-media',[
  'core/js/adapt',
  'core/js/views/componentView',
  'core/js/models/componentModel',
  'libraries/mediaelement-and-player',
  'libraries/mediaelement-fullscreen-hook'
], function(Adapt, ComponentView, ComponentModel) {

  var froogaloopAdded = false;

  // The following function is used to to prevent a memory leak in Internet Explorer
  // See: http://javascript.crockford.com/memory/leak.html
  function purge(d) {
    var a = d.attributes;
    if (a) {
      for (let i = a.length - 1; i >= 0; i -= 1) {
        let n = a[i].name;
        if (typeof d[n] === 'function') {
          d[n] = null;
        }
      }
    }
    a = d.childNodes;
    if (a) {
      for (let i = 0, count = a.length; i < count; i += 1) {
        purge(d.childNodes[i]);
      }
    }
  }

  /*
   * Default shortcut keys trap a screen reader user inside the player once in focus. These keys are unnecessary
   * as one may traverse the player in a linear fashion without needing to know or use shortcut keys. Below is
   * the removal of the default shortcut keys.
   *
   * The default seek interval functions are passed two different data types from mejs which they handle incorrectly. One
   * is a duration integer the other is the player object. The default functions error on slider key press and so break
   * accessibility. Below is a correction.
   */
  _.extend(window.mejs.MepDefaults, {
    keyActions: [],
    defaultSeekForwardInterval: function(duration) {
      if (typeof duration === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    },
    defaultSeekBackwardInterval: function(duration) {
      if (typeof duration === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    }
  });

  var MediaView = ComponentView.extend({

    events: {
      'click .js-media-inline-transcript-toggle': 'onToggleInlineTranscript',
      'click .js-media-external-transcript-click': 'onExternalTranscriptClicked',
      'click .js-skip-to-transcript': 'onSkipToTranscript'
    },

    className: function() {
      var classes = ComponentView.prototype.className.call(this);
      var playerOptions = this.model.get('_playerOptions');
      if (playerOptions && playerOptions.toggleCaptionsButtonWhenOnlyOne) {
        classes += ' toggle-captions';
      }
      return classes;
    },

    preRender: function() {
      this.listenTo(Adapt, {
        'device:resize': this.onScreenSizeChanged,
        'device:changed': this.onDeviceChanged,
        'media:stop': this.onMediaStop
      });

      _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');

      // set initial player state attributes
      this.model.set({
        '_isMediaEnded': false,
        '_isMediaPlaying': false
      });

      if (this.model.get('_media').source) {
        var media = this.model.get('_media');

        // Avoid loading of Mixed Content (insecure content on a secure page)
        if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {
          media.source = media.source.replace(/^http:/, 'https:');
        }

        this.model.set('_media', media);
      }

      this.checkIfResetOnRevisit();
    },

    postRender: function() {
      this.setupPlayer();
      this.addMejsButtonClass();
    },

    addMejsButtonClass: function() {
      this.$('.mejs-overlay-button').addClass('icon');
    },

    setupPlayer: function() {
      if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});

      var modelOptions = this.model.get('_playerOptions');

      if (modelOptions.pluginPath === undefined) {
        // on the off-chance anyone still needs to use the Flash-based player...
        _.extend(modelOptions, {
          pluginPath: 'https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.21.2/',
          flashName: 'flashmediaelement-cdn.swf',
          flashScriptAccess: 'always'
        });
      }

      if (modelOptions.features === undefined) {
        modelOptions.features = ['playpause', 'progress', 'current', 'duration'];
        if (this.model.get('_useClosedCaptions')) {
          modelOptions.features.unshift('tracks');
        }
        if (this.model.get('_allowFullScreen')) {
          modelOptions.features.push('fullscreen');
        }
        if (this.model.get('_showVolumeControl')) {
          modelOptions.features.push('volume');
        }
      }

      /*
      Unless we are on Android/iOS and using native controls, when MediaElementJS initializes the player
      it will invoke the success callback prior to performing one last call to setPlayerSize.
      This call to setPlayerSize is deferred by 50ms so we add a delay of 100ms here to ensure that
      we don't invoke setReadyStatus until the player is definitely finished rendering.
      */
      modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);

      if (this.model.get('_useClosedCaptions')) {
        var startLanguage = this.model.get('_startLanguage') || 'en';
        if (!Adapt.offlineStorage.get('captions')) {
          Adapt.offlineStorage.set('captions', startLanguage);
        }
        modelOptions.startLanguage = this.checkForSupportedCCLanguage(Adapt.offlineStorage.get('captions'));
      }

      if (modelOptions.alwaysShowControls === undefined) {
        modelOptions.alwaysShowControls = false;
      }
      if (modelOptions.hideVideoControlsOnLoad === undefined) {
        modelOptions.hideVideoControlsOnLoad = true;
      }

      this.addMediaTypeClass();

      this.addThirdPartyFixes(modelOptions, function createPlayer() {
        // create the player
        this.$('audio, video').mediaelementplayer(modelOptions);
        this.cleanUpPlayer();

        var _media = this.model.get('_media');
        // if no media is selected - set ready now, as success won't be called
        if (!_media.mp3 && !_media.mp4 && !_media.ogv && !_media.webm && !_media.source) {
          Adapt.log.warn('ERROR! No media is selected in components.json for component ' + this.model.get('_id'));
          this.setReadyStatus();
          return;
        }
        // Check if we're streaming
        if (_media.source) {
          this.$('.media__widget').addClass('external-source');
        }
      }.bind(this));
    },

    addMediaTypeClass: function() {
      var media = this.model.get('_media');
      if (media && media.type) {
        var typeClass = media.type.replace(/\//, '-');
        this.$('.media__widget').addClass(typeClass);
      }
    },

    addThirdPartyFixes: function(modelOptions, callback) {
      var media = this.model.get('_media');
      if (!media) return callback();

      switch (media.type) {
        case 'video/vimeo':
          modelOptions.alwaysShowControls = false;
          modelOptions.hideVideoControlsOnLoad = true;
          modelOptions.features = [];
          if (froogaloopAdded) return callback();
          $.getScript('assets/froogaloop.js')
            .done(function() {
              froogaloopAdded = true;
              callback();
            })
            .fail(function() {
              froogaloopAdded = false;
              console.log('Could not load froogaloop.js');
            });
          break;
        default:
          callback();
      }
    },

    cleanUpPlayer: function() {
      this.$('.media__widget').children('.mejs-offscreen').remove();
      this.$('[role=application]').removeAttr('role tabindex');
      this.$('[aria-controls]').removeAttr('aria-controls');
    },

    setupEventListeners: function() {
      this.completionEvent = (this.model.get('_setCompletionOn') || 'play');

      if (this.completionEvent === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }

      // wrapper to check if preventForwardScrubbing is turned on.
      if ((this.model.get('_preventForwardScrubbing')) && (!this.model.get('_isComplete'))) {
        $(this.mediaElement).on({
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate
        });
      }

      // handle other completion events in the event Listeners
      $(this.mediaElement).on({
        'play': this.onMediaElementPlay,
        'pause': this.onMediaElementPause,
        'ended': this.onMediaElementEnded
      });

      // occasionally the mejs code triggers a click of the captions language
      // selector during setup, this slight delay ensures we skip that
      _.delay(this.listenForCaptionsChange.bind(this), 250);
    },

    /**
     * Sets up the component to detect when the user has changed the captions so that it can store the user's
     * choice in offlineStorage and notify other media components on the same page of the change
     * Also sets the component up to listen for this event from other media components on the same page
     */
    listenForCaptionsChange: function() {
      if (!this.model.get('_useClosedCaptions')) return;

      var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ?
        '.mejs-captions-button button' :
        '.mejs-captions-selector';

      this.$(selector).on('click.mediaCaptionsChange', _.debounce(function() {
        var srclang = this.mediaElement.player.selectedTrack ? this.mediaElement.player.selectedTrack.srclang : 'none';
        Adapt.offlineStorage.set('captions', srclang);
        Adapt.trigger('media:captionsChange', this, srclang);
      }.bind(this), 250)); // needs debouncing because the click event fires twice

      this.listenTo(Adapt, 'media:captionsChange', this.onCaptionsChanged);
    },

    /**
     * Handles updating the captions in this instance when learner changes captions in another
     * media component on the same page
     * @param {Backbone.View} view The view instance that triggered the event
     * @param {string} lang The captions language the learner chose in the other media component
     */
    onCaptionsChanged: function(view, lang) {
      if (view && view.cid === this.cid) return; // ignore the event if we triggered it

      lang = this.checkForSupportedCCLanguage(lang);

      this.mediaElement.player.setTrack(lang);

      // because calling player.setTrack doesn't update the cc button's languages popup...
      var $inputs = this.$('.mejs-captions-selector input');
      $inputs.filter(':checked').prop('checked', false);
      $inputs.filter('[value="' + lang + '"]').prop('checked', true);
    },

    /**
     * When the learner selects a captions language in another media component, that language may not be available
     * in this instance, in which case default to the `_startLanguage` if that's set - or "none" if it's not
     * @param {string} lang The language we're being asked to switch to e.g. "de"
     * @return {string} The language we're actually going to switch to - or "none" if there's no good match
     */
    checkForSupportedCCLanguage: function (lang) {
      if (!lang || lang === 'none') return 'none';

      if (_.findWhere(this.model.get('_media').cc, { srclang: lang })) return lang;

      return this.model.get('_startLanguage') || 'none';
    },

    onMediaElementPlay: function(event) {
      this.queueGlobalEvent('play');

      Adapt.trigger('media:stop', this);

      if (this.model.get('_pauseWhenOffScreen')) $(this.mediaElement).on('inview', this.onMediaElementInview);

      this.model.set({
        '_isMediaPlaying': true,
        '_isMediaEnded': false
      });

      if (this.completionEvent === 'play') {
        this.setCompletionStatus();
      }
    },

    onMediaElementPause: function(event) {
      this.queueGlobalEvent('pause');

      $(this.mediaElement).off('inview', this.onMediaElementInview);

      this.model.set('_isMediaPlaying', false);
    },

    onMediaElementEnded: function(event) {
      this.queueGlobalEvent('ended');

      this.model.set('_isMediaEnded', true);

      if (this.completionEvent === 'ended') {
        this.setCompletionStatus();
      }
    },

    onMediaElementInview: function(event, isInView) {
      if (!isInView && !event.currentTarget.paused) event.currentTarget.pause();
    },

    onMediaElementSeeking: function(event) {
      var maxViewed = this.model.get('_maxViewed');
      if (!maxViewed) {
        maxViewed = 0;
      }
      if (event.target.currentTime > maxViewed) {
        event.target.currentTime = maxViewed;
      }
    },

    onMediaElementTimeUpdate: function(event) {
      var maxViewed = this.model.get('_maxViewed');
      if (!maxViewed) {
        maxViewed = 0;
      }
      if (event.target.currentTime > maxViewed) {
        this.model.set('_maxViewed', event.target.currentTime);
      }
    },

    // Overrides the default play/pause functionality to stop accidental playing on touch devices
    setupPlayPauseToggle: function() {
      // bit sneaky, but we don't have a this.mediaElement.player ref on iOS devices
      var player = this.mediaElement.player;

      if (!player) {
        console.log("Media.setupPlayPauseToggle: OOPS! there's no player reference.");
        return;
      }

      // stop the player dealing with this, we'll do it ourselves
      player.options.clickToPlayPause = false;

      this.onOverlayClick = this.onOverlayClick.bind(this);
      this.onMediaElementClick = this.onMediaElementClick.bind(this);

      // play on 'big button' click
      this.$('.mejs-overlay-button').on('click', this.onOverlayClick);

      // pause on player click
      this.$('.mejs-mediaelement').on('click', this.onMediaElementClick);
    },

    onMediaStop: function(view) {

      // Make sure this view isn't triggering media:stop
      if (view && view.cid === this.cid) return;

      if (!this.mediaElement || !this.mediaElement.player) return;

      this.mediaElement.player.pause();

    },

    onOverlayClick: function() {
      var player = this.mediaElement.player;
      if (!player) return;

      player.play();
    },

    onMediaElementClick: function(event) {
      var player = this.mediaElement.player;
      if (!player) return;

      var isPaused = player.media.paused;
      if (!isPaused) player.pause();
    },

    checkIfResetOnRevisit: function() {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },

    remove: function() {
      this.$('.mejs-overlay-button').off('click', this.onOverlayClick);
      this.$('.mejs-mediaelement').off('click', this.onMediaElementClick);

      if (this.model.get('_useClosedCaptions')) {
        var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ?
          '.mejs-captions-button button' :
          '.mejs-captions-selector';
        this.$(selector).off('click.mediaCaptionsChange');
      }

      var modelOptions = this.model.get('_playerOptions');
      delete modelOptions.success;

      var media = this.model.get('_media');
      if (media) {
        switch (media.type) {
          case 'video/vimeo':
            this.$('iframe')[0].isRemoved = true;
        }
      }

      if (this.mediaElement && this.mediaElement.player) {
        var playerId = this.mediaElement.player.id;

        purge(this.$el[0]);
        this.mediaElement.player.remove();

        if (window.mejs.players[playerId]) {
          delete window.mejs.players[playerId];
        }
      }

      if (this.mediaElement) {
        $(this.mediaElement).off({
          'play': this.onMediaElementPlay,
          'pause': this.onMediaElementPause,
          'ended': this.onMediaElementEnded,
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate,
          'inview': this.onMediaElementInview
        });

        this.mediaElement.src = '';
        $(this.mediaElement.pluginElement).remove();
        delete this.mediaElement;
      }

      ComponentView.prototype.remove.call(this);
    },

    onDeviceChanged: function() {
      if (this.model.get('_media').source) {
        this.$('.mejs-container').width(this.$('.component__widget').width());
      }
    },

    onPlayerReady: function (mediaElement, domObject) {
      this.mediaElement = mediaElement;

      var player = this.mediaElement.player;
      if (!player) player = window.mejs.players[this.$('.mejs-container').attr('id')];

      var hasTouch = window.mejs.MediaFeatures.hasTouch;
      if (hasTouch) {
        this.setupPlayPauseToggle();
      }

      this.addThirdPartyAfterFixes();
      this.cleanUpPlayerAfter();

      if (player && this.model.has('_startVolume')) {
        // Setting the start volume only works with the Flash-based player if you do it here rather than in setupPlayer
        player.setVolume(parseInt(this.model.get('_startVolume')) / 100);
      }

      this.setReadyStatus();
      this.setupEventListeners();
    },

    addThirdPartyAfterFixes: function() {
      var media = this.model.get('_media');
      switch (media.type) {
        case 'video/vimeo':
          this.$('.mejs-container').attr('tabindex', 0);
      }
    },

    cleanUpPlayerAfter: function() {
      this.$("[aria-valuemax='NaN']").attr('aria-valuemax', 0);
    },

    onScreenSizeChanged: function() {
      this.$('audio, video').width(this.$('.component__widget').width());
    },

    onSkipToTranscript: function() {
      // need slight delay before focussing button to make it work when JAWS is running
      // see https://github.com/adaptlearning/adapt_framework/issues/2427
      _.delay(function() {
        this.$('.media__transcript-btn').a11y_focus();
      }.bind(this), 250);
    },

    onToggleInlineTranscript: function(event) {
      if (event) event.preventDefault();
      var $transcriptBodyContainer = this.$('.media__transcript-body-inline');
      var $button = this.$('.media__transcript-btn-inline');
      var $buttonText = this.$('.media__transcript-btn-inline .media__transcript-btn-text');

      if ($transcriptBodyContainer.hasClass('inline-transcript-open')) {
        $transcriptBodyContainer.stop(true, true).slideUp(function() {
          $(window).resize();
        });
        $button.attr('aria-expanded', false);
        $transcriptBodyContainer.removeClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptButton);
      } else {
        $transcriptBodyContainer.stop(true, true).slideDown(function() {
          $(window).resize();
        });
        $button.attr('aria-expanded', true);
        $transcriptBodyContainer.addClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptCloseButton);

        if (this.model.get('_transcript')._setCompletionOnView !== false) {
          this.setCompletionStatus();
        }
      }
    },

    onExternalTranscriptClicked: function(event) {
      if (this.model.get('_transcript')._setCompletionOnView !== false) {
        this.setCompletionStatus();
      }
    },

    /**
     * Queue firing a media event to prevent simultaneous events firing, and provide a better indication of how the
     * media  player is behaving
     * @param {string} eventType
     */
    queueGlobalEvent: function(eventType) {
      var t = Date.now();
      var lastEvent = this.lastEvent || { time: 0 };
      var timeSinceLastEvent = t - lastEvent.time;
      var debounceTime = 500;

      this.lastEvent = {
        time: t,
        type: eventType
      };

      // Clear any existing timeouts
      clearTimeout(this.eventTimeout);

      // Always trigger 'ended' events
      if (eventType === 'ended') {
        return this.triggerGlobalEvent(eventType);
      }

      // Fire the event after a delay, only if another event has not just been fired
      if (timeSinceLastEvent > debounceTime) {
        this.eventTimeout = setTimeout(this.triggerGlobalEvent.bind(this, eventType), debounceTime);
      }
    },

    triggerGlobalEvent: function(eventType) {
      var player = this.mediaElement.player;

      var eventObj = {
        type: eventType,
        src: this.mediaElement.src,
        platform: this.mediaElement.pluginType
      };

      if (player) eventObj.isVideo = player.isVideo;

      Adapt.trigger('media', eventObj);
    }

  });

  return Adapt.register('media', {
    model: ComponentModel.extend({}), // create a new class in the inheritance chain so it can be extended per component type if necessary later
    view: MediaView
  });

});

define('components/adapt-contrib-text/js/adapt-contrib-text',[
  'core/js/adapt',
  'core/js/views/componentView',
  'core/js/models/componentModel'
], function(Adapt, ComponentView, ComponentModel) {

  var TextView = ComponentView.extend({

    preRender: function() {
      this.checkIfResetOnRevisit();
    },

    postRender: function() {
      this.setReadyStatus();

      this.setupInview();
    },

    setupInview: function() {
      var selector = this.getInviewElementSelector();
      if (!selector) {
        this.setCompletionStatus();
        return;
      }

      this.setupInviewCompletion(selector);
    },

    /**
     * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element
     */
    getInviewElementSelector: function() {
      if (this.model.get('body')) return '.component__body';

      if (this.model.get('instruction')) return '.component__instruction';

      if (this.model.get('displayTitle')) return '.component__title';

      return null;
    },

    checkIfResetOnRevisit: function() {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      // If reset is enabled set defaults
      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    }
  },
  {
    template: 'text'
  });

  return Adapt.register('text', {
    model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later
    view: TextView
  });
});

define('core/js/views/menuItemView',[
  'core/js/views/adaptView'
], function(AdaptView) {

  var MenuItemView = AdaptView.extend({

    attributes: function() {
      return AdaptView.resultExtend('attributes', {
        'role': 'listitem',
        'aria-labelledby': this.model.get('_id') + '-heading'
      }, this);
    },

    className: function() {
      return [
        'menu-item',
        this.constructor.className,
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        this.setHidden(),
        (this.model.get('_isVisited') ? 'is-visited' : ''),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isLocked') ? 'is-locked' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    },

    preRender: function() {
      this.model.checkCompletionStatus();
      this.model.checkInteractionCompletionStatus();
    },

    postRender: function() {
      this.$el.imageready(this.setReadyStatus.bind(this));
    }

  }, {
    type: 'menuItem'
  });

  return MenuItemView;

});

define('core/js/views/menuView',[
  'core/js/adapt',
  'core/js/views/adaptView',
  'core/js/views/menuItemView'
], function(Adapt, AdaptView, MenuItemView) {

  var MenuView = AdaptView.extend({

    attributes: function() {
      return AdaptView.resultExtend('attributes', {
        'role': 'main',
        'aria-labelledby': this.model.get('_id') + '-heading'
      }, this);
    },

    className: function() {
      return [
        'menu',
        this.constructor.className,
        this.model.get('_id'),
        this.model.get('_classes'),
        this.setVisibility(),
        (this.model.get('_isComplete') ? 'is-complete' : ''),
        (this.model.get('_isOptional') ? 'is-optional' : '')
      ].join(' ');
    },

    preRender: function() {
      $.inview.lock('menuView');
      this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
      this.$el.css('opacity', 0);
      this.listenTo(this.model, 'change:_isReady', this.isReady);
    },

    isReady: function() {
      if (!this.model.get('_isReady')) return;

      var performIsReady = function() {
        $('.js-loading').hide();
        $(window).scrollTop(0);
        Adapt.trigger('menuView:ready', this);
        $.inview.unlock('menuView');
        var styleOptions = { opacity: 1 };
        if (this.disableAnimation) {
          this.$el.css(styleOptions);
          $.inview();
        } else {
          this.$el.velocity(styleOptions, {
            duration: 'fast',
            complete: function() {
              $.inview();
            }
          });
        }
        $(window).scroll();
      }.bind(this);

      Adapt.wait.queue(function() {
        _.defer(performIsReady);
      });
    }

  }, {
    childContainer: '.js-children',
    childView: MenuItemView,
    type: 'menu',
    template: 'menu'
  });

  return MenuView;

});

define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenuItemView',[
  "core/js/views/menuItemView"
], function(MenuItemView) {

  var BoxMenuItemView = MenuItemView.extend({

    events: {
      'click .js-btn-click' : 'onClickMenuItemButton'
    },

    onClickMenuItemButton: function(event) {
      if (event && event.preventDefault) event.preventDefault();
      if (this.model.get('_isLocked')) return;
      Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});
    }

  }, {
    className: 'boxmenu-item',
    template: 'boxMenuItem'
  });

  return BoxMenuItemView;

});

define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenu',[
  'core/js/adapt',
  'core/js/views/menuView',
  "./adapt-contrib-boxMenuItemView"
], function(Adapt, MenuView, BoxMenuItemView) {

  var BoxMenuView = MenuView.extend({

    initialize: function() {
      MenuView.prototype.initialize.apply(this);
      this.setStyles();

      this.listenTo(Adapt, {
        "device:changed": this.onDeviceResize
      });
    },

    onDeviceResize: function() {
      this.setStyles();
    },

    setStyles: function() {
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.processHeader();
    },

    setBackgroundImage: function() {
      var config = this.model.get('_boxMenu');
      var backgroundImages = config && config._backgroundImage;

      if (!backgroundImages) return;

      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;
        case "medium":
          backgroundImage = backgroundImages._medium;
          break;
        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el
          .addClass("has-bg-image")
          .css("background-image", "url(" + backgroundImage + ")");
      } else {
        this.$el
          .removeClass("has-bg-image")
          .css("background-image", "");
      }
    },

    setBackgroundStyles: function () {
      var config = this.model.get('_boxMenu');
      var styles = config && config._backgroundStyles;

      if (!styles) return;

      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },

    processHeader: function() {
      var config = this.model.get('_boxMenu');
      var header = config && config._menuHeader;

      if (!header) return;

      var $header = this.$('.menu__header');

      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },

    setHeaderBackgroundImage: function(config, $header) {
      var backgroundImages = config._backgroundImage;

      if (!backgroundImages) return;

      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;
        case "medium":
          backgroundImage = backgroundImages._medium;
          break;
        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header
          .addClass("has-bg-image")
          .css("background-image", "url(" + backgroundImage + ")");
      } else {
        $header
          .removeClass("has-bg-image")
          .css("background-image", "");
      }
    },

    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;

      if (!styles) return;

      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },

    setHeaderMinimumHeight: function(config, $header) {
      var minimumHeights = config._minimumHeights;

      if (!minimumHeights) return;

      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;
        case "medium":
          minimumHeight = minimumHeights._medium;
          break;
        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header
          .addClass("has-min-height")
          .css("min-height", minimumHeight + "px");
      } else {
        $header
          .removeClass("has-min-height")
          .css("min-height", "");
      }
    }

  }, {
    childView: BoxMenuItemView,
    className: 'boxmenu',
    template: 'boxMenu'
  });

  Adapt.on('router:menu', function(model) {
    $('#wrapper').append(new BoxMenuView({model: model}).$el);
  });

});

define('theme/60f6ae1733257a3bcfe581e7/js/themeView',[
  "core/js/adapt"
], function(Adapt) {

  var ThemeView = Backbone.View.extend({

    className: function() {},

    initialize: function() {
      this.setStyles();

      this.listenTo(Adapt, {
        "device:changed": this.onDeviceResize,
        "remove": this.remove
      });
    },

    onDeviceResize: function() {
      this.setStyles();
    },

    remove: function() {
      Backbone.View.prototype.remove.call(this);

      this.onRemove();
    },

    setStyles: function() {
      this.setClasses();
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.setMinimumHeight();
      this.setCustomStyles();
    },

    setClasses: function() {
      this.$el.addClass(this.className());
    },

    setBackgroundImage: function() {
      var backgroundImages = this.model.get("_backgroundImage");

      if (!backgroundImages) return;

      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;
        case "medium":
          backgroundImage = backgroundImages._medium;
          break;
        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el
          .addClass("has-bg-image")
          .css("background-image", "url(" + backgroundImage + ")");
      } else {
        this.$el
          .removeClass("has-bg-image")
          .css("background-image", "");
      }
    },

    setBackgroundStyles: function () {
      var styles = this.model.get("_backgroundStyles");

      if (!styles) return;

      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },

    setMinimumHeight: function() {
      var minimumHeights = this.model.get("_minimumHeights");

      if (!minimumHeights) return;

      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;
        case "medium":
          minimumHeight = minimumHeights._medium;
          break;
        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        this.$el
          .addClass("has-min-height")
          .css("min-height", minimumHeight + "px");
      } else {
        this.$el
          .removeClass("has-min-height")
          .css("min-height", "");
      }
    },

    setCustomStyles: function() {},

    onRemove: function() {}

  });

  return ThemeView;

});

define('theme/60f6ae1733257a3bcfe581e7/js/themePageView',[
  './themeView',
  'core/js/adapt'
], function(ThemeView, Adapt) {

  var ThemePageView = ThemeView.extend({

    className: function() {},

    setCustomStyles: function() {
      this.processHeader();
    },

    processHeader: function() {
      var header = this.model.get('_pageHeader');

      if (!header) return;

      var $header = this.$('.page__header');

      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },

    setHeaderBackgroundImage: function(config, $header) {
      var backgroundImages = config._backgroundImage;

      if (!backgroundImages) return;

      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;
        case "medium":
          backgroundImage = backgroundImages._medium;
          break;
        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header
          .addClass("has-bg-image")
          .css("background-image", "url(" + backgroundImage + ")");
      } else {
        $header
          .removeClass("has-bg-image")
          .css("background-image", "");
      }
    },

    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;

      if (!styles) return;

      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },

    setHeaderMinimumHeight: function(config, $header) {
      var minimumHeights = config._minimumHeights;

      if (!minimumHeights) return;

      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;
        case "medium":
          minimumHeight = minimumHeights._medium;
          break;
        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header
          .addClass("has-min-height")
          .css("min-height", minimumHeight + "px");
      } else {
        $header
          .removeClass("has-min-height")
          .css("min-height", "");
      }
    },

    onRemove: function() {}

  });

  return ThemePageView;

});

define('theme/60f6ae1733257a3bcfe581e7/js/themeArticleView',[
  "./themeView",
  "core/js/adapt"
], function(ThemeView, Adapt) {

  var ThemeArticleView = ThemeView.extend({

    className: function() {},

    setCustomStyles: function() {},

    onRemove: function() {}

  });

  return ThemeArticleView;

});

define('theme/60f6ae1733257a3bcfe581e7/js/themeBlockView',[
  "./themeView",
  "core/js/adapt"
], function(ThemeView, Adapt) {

  var ThemeBlockView = ThemeView.extend({

    className: function() {
      return this.model.get("_isDividerBlock") ? "is-divider-block" : "";
    },

    setCustomStyles: function() {},

    onRemove: function() {}

  });

  return ThemeBlockView;

});

define('theme/60f6ae1733257a3bcfe581e7/js/theme',[
  "core/js/adapt",
  "./themePageView",
  "./themeArticleView",
  "./themeBlockView",
  "./themeView"
], function(Adapt, ThemePageView, ThemeArticleView, ThemeBlockView, ThemeView) {

  function onDataReady() {
    $("html").addClass(Adapt.course.get("_courseStyle"));
  }

  function onPostRender(view) {
    var model = view.model;
    var theme = model.get("_vanilla");

    if (!theme) return;

    switch (model.get("_type")) {
      case "page":
        new ThemePageView({ model: new Backbone.Model(theme), el: view.$el });
        break;
      case "article":
        new ThemeArticleView({ model: new Backbone.Model(theme), el: view.$el });
        break;
      case "block":
        new ThemeBlockView({ model: new Backbone.Model(theme), el: view.$el });
        break;
      default:
        new ThemeView({ model: new Backbone.Model(theme), el: view.$el });
    }
  }

  Adapt.on({
    "app:dataReady": onDataReady,
    "pageView:postRender articleView:postRender blockView:postRender": onPostRender
  });
});

;
define("plugins", ["components/adapt-contrib-graphic/js/adapt-contrib-graphic","components/adapt-contrib-media/js/adapt-contrib-media","components/adapt-contrib-text/js/adapt-contrib-text","menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenu","theme/60f6ae1733257a3bcfe581e7/js/theme"], function(){});

require([
  'core/js/adapt',
  'core/js/accessibility',
  'core/js/data',
  'core/js/offlineStorage',
  'core/js/logging',
  'core/js/tracking',
  'core/js/device',
  'core/js/drawer',
  'core/js/notify',
  'core/js/router',
  'core/js/models/lockingModel',
  'core/js/helpers',
  'core/js/scrolling',
  'core/js/headings',
  'core/js/navigation',
  'plugins'
], function (Adapt) {

  $('body').append(Handlebars.templates.loading());

  Adapt.data.on('ready', function triggerInit() {
    Adapt.log.debug('Calling Adapt.init');

    Adapt.init();

    Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
  }).init();

});

define("core/js/app", function(){});

